{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TofuSoup Documentation","text":"<p>Welcome to TofuSoup - A comprehensive toolkit and conformance testing suite for the OpenTofu/Terraform ecosystem.</p>"},{"location":"#what-is-tofusoup","title":"What is TofuSoup?","text":"<p>TofuSoup provides CLI tools and testing frameworks for working with Terraform-related technologies:</p> <ul> <li>CTY Operations: Work with Terraform's Configuration Type System</li> <li>HCL Processing: Parse and convert HashiCorp Configuration Language</li> <li>Wire Protocol: Encode/decode Terraform wire protocol messages</li> <li>RPC Testing: Cross-language RPC compatibility testing (Python \u2194 Go)</li> <li>Registry Access: Query and search Terraform/OpenTofu registries</li> <li>Matrix Testing: Test providers across multiple Terraform/OpenTofu versions</li> <li>Provider Tools: Development utilities for provider authors</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>$ pip install tofusoup\n</code></pre> <p>Or for development:</p> <pre><code>$ git clone https://github.com/provide-io/tofusoup.git\n$ cd tofusoup\n$ uv sync\n</code></pre> <p>Verify installation:</p> <pre><code>$ soup --version\ntofusoup, version 0.1.0\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#working-with-cty-values","title":"Working with CTY Values","text":"<p>View and convert CTY data between formats:</p> <pre><code>$ soup cty view data.json\n# Displays CTY structure as a tree\n\n$ soup cty convert input.json output.msgpack\n# Convert between JSON, MessagePack, and HCL formats\n</code></pre>"},{"location":"#working-with-hcl","title":"Working with HCL","text":"<p>Parse and convert HCL files:</p> <pre><code>$ soup hcl view main.tf\n# Parse and display HCL structure\n\n$ soup hcl convert config.hcl config.json\n# Convert HCL to JSON or MessagePack\n</code></pre>"},{"location":"#working-with-wire-protocol","title":"Working with Wire Protocol","text":"<p>Encode and decode Terraform wire protocol messages:</p> <pre><code>$ soup wire encode value.json value.tfw.b64\n# Encode JSON to wire format\n\n$ soup wire decode value.tfw.b64 value.json\n# Decode wire format back to JSON\n</code></pre>"},{"location":"#rpc-testing","title":"RPC Testing","text":"<p>Test cross-language RPC compatibility:</p> <pre><code>$ soup rpc kv put mykey \"hello world\"\n# Store a value via RPC\n\n$ soup rpc kv get mykey\n# Retrieve a value via RPC\n</code></pre>"},{"location":"#running-conformance-tests","title":"Running Conformance Tests","text":"<p>Run cross-language compatibility tests:</p> <pre><code>$ soup test all\n# Run all conformance test suites\n\n$ soup test cty\n# Run only CTY conformance tests\n\n$ soup test rpc -v\n# Run RPC tests with verbose output\n</code></pre>"},{"location":"#matrix-testing-with-stir","title":"Matrix Testing with Stir","text":"<p>Test providers across multiple Terraform/OpenTofu versions:</p> <pre><code>$ soup stir tests/stir_cases\n# Run integration tests\n\n$ soup stir tests/stir_cases --matrix\n# Run tests across all configured tool versions\n</code></pre>"},{"location":"#registry-operations","title":"Registry Operations","text":"<p>Query Terraform and OpenTofu registries:</p> <pre><code>$ soup registry search provider aws\n# Search for AWS provider\n\n$ soup registry info hashicorp/aws\n# Get detailed provider information\n\n$ soup sui\n# Launch interactive TUI browser\n</code></pre>"},{"location":"#managing-test-harnesses","title":"Managing Test Harnesses","text":"<p>Build and manage Go test harnesses:</p> <pre><code>$ soup harness list\n# List available harnesses\n\n$ soup harness build --all\n# Build all Go harnesses\n\n$ soup harness verify-cli soup-go\n# Verify harness CLI functionality\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Architecture: System design and architecture</li> <li>Guides: Step-by-step tutorials</li> <li>Configuration: soup.toml configuration reference</li> <li>Testing: Testing documentation</li> </ul>"},{"location":"#core-capabilities","title":"Core Capabilities","text":""},{"location":"#cty-configuration-type-system","title":"CTY (Configuration Type System)","text":"<p>Tools for working with Terraform's type system:</p> <ul> <li>View CTY structures with rich tree visualization</li> <li>Convert between JSON, MessagePack, and HCL formats</li> <li>Validate values against CTY type specifications</li> <li>Benchmark encoding/decoding performance</li> </ul> <p>See: <code>soup cty --help</code></p>"},{"location":"#hcl-hashicorp-configuration-language","title":"HCL (HashiCorp Configuration Language)","text":"<p>Tools for HCL file processing:</p> <ul> <li>Parse HCL files and display structure</li> <li>Convert HCL to JSON or MessagePack</li> <li>Work with CTY representations of HCL</li> </ul> <p>See: <code>soup hcl --help</code></p>"},{"location":"#wire-protocol","title":"Wire Protocol","text":"<p>Terraform wire protocol utilities:</p> <ul> <li>Encode JSON to wire format (MessagePack + Base64)</li> <li>Decode wire format back to JSON</li> <li>Cross-language wire protocol compatibility testing</li> </ul> <p>See: <code>soup wire --help</code></p>"},{"location":"#rpc-and-plugin-system","title":"RPC and Plugin System","text":"<p>Cross-language RPC testing infrastructure:</p> <ul> <li>Python and Go RPC server implementations</li> <li>mTLS and certificate management</li> <li>Cross-language compatibility testing (Python \u2194 Go)</li> <li>go-plugin compatible plugin server</li> </ul> <p>See: <code>soup rpc --help</code></p>"},{"location":"#conformance-testing","title":"Conformance Testing","text":"<p>Pytest-based conformance test suites:</p> <ul> <li>CTY cross-language compatibility</li> <li>HCL parsing consistency</li> <li>Wire protocol encoding/decoding</li> <li>RPC communication validation</li> </ul> <p>See: <code>soup test --help</code> and Running Conformance Tests</p>"},{"location":"#matrix-testing-stir","title":"Matrix Testing (Stir)","text":"<p>Test providers across multiple tool versions:</p> <ul> <li>Parallel test execution</li> <li>Support for Terraform and OpenTofu</li> <li>Version matrix configuration</li> <li>Automated test reporting</li> </ul> <p>See: <code>soup stir --help</code> and Matrix Testing Guide</p>"},{"location":"#registry-operations_1","title":"Registry Operations","text":"<p>Query and browse Terraform/OpenTofu registries:</p> <ul> <li>Provider and module search</li> <li>Version information</li> <li>Documentation access</li> <li>Interactive TUI browser (sui command)</li> </ul> <p>See: <code>soup registry --help</code> and <code>soup sui --help</code></p>"},{"location":"#configuration","title":"Configuration","text":"<p>TofuSoup uses <code>soup.toml</code> for configuration:</p> <pre><code>[global_settings]\ndefault_python_log_level = \"INFO\"\n\n[harness_defaults.go]\nbuild_flags = [\"-v\"]\ntimeout_seconds = 300\n\n[test_suite.rpc]\nenv_vars = { KV_STORAGE_DIR = \"/tmp\" }\n\n[workenv.matrix]\nparallel_jobs = 4\ntimeout_minutes = 30\n</code></pre> <p>See: Configuration Documentation</p>"},{"location":"#development","title":"Development","text":"<p>For development setup and contribution guidelines:</p> <pre><code>$ git clone https://github.com/provide-io/tofusoup.git\n$ cd tofusoup\n$ uv sync\n$ uv run pytest\n</code></pre> <p>See: CONTRIBUTING.md and CLAUDE.md</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial implementation of the <code>soup</code> CLI with lazy-loading commands.</li> <li>Core modules for <code>cty</code>, <code>hcl</code>, <code>wire</code>, <code>rpc</code>, <code>harness</code>, and <code>testing</code>.</li> <li>Go harnesses for CTY, HCL, Wire, and RPC (K/V store).</li> <li>Pytest-based conformance testing framework.</li> <li><code>.garnish</code> documentation system with <code>scaffold</code> and <code>render</code> commands.</li> <li><code>workenv</code> tool management system for managing TF, Tofu, Go, etc.</li> <li><code>stir</code> command for parallel Terraform integration testing.</li> <li>New migration guide (<code>docs/guides/migration.md</code>) for transitioning from old harness names to unified <code>soup-go</code> harness.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Refactored <code>pyvider-cty</code> dependencies and stabilized APIs.</li> <li>Consolidated test suites under the <code>soup test</code> command.</li> <li>Standardized on <code>soup.toml</code> for all configuration.</li> <li>BREAKING: Unified Go harnesses - Replaced individual harnesses (<code>go-cty</code>, <code>go-hcl</code>, <code>go-rpc</code>, <code>go-wire</code>) with single <code>soup-go</code> polyglot harness.</li> <li>Updated harness binary paths - Changed from <code>tofusoup/src/tofusoup/harness/go/bin/</code> to <code>harnesses/bin/</code>.</li> <li>Documentation restructure - Updated all documentation to reflect unified harness architecture.</li> <li>Configuration file references - Updated from <code>docs/CONFIG_TOML.md</code> to <code>docs/reference/configuration.md</code>.</li> <li>Removed deprecated commands - <code>soup cty test</code>, <code>soup rpc test</code>, and <code>soup wire test</code> (use <code>soup test &lt;suite&gt;</code> instead).</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Addressed binary mismatches between Python and Go encoders for CTY and Wire protocols.</li> <li>Fixed all harness naming inconsistencies across README.md, CLAUDE.md, and documentation.</li> <li>Fixed broken documentation links after file reorganization.</li> <li>Removed stale content - Moved STATUS.md, PHASE_1_FINDINGS.md, and PHASE_2_COMPLETE.md to <code>docs/historical/</code>.</li> <li>Removed garnish references from architecture documentation (moved to separate <code>plating</code> package).</li> <li>Removed empty CLI reference directory (<code>docs/reference/cli/</code>).</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Deprecated test commands: <code>soup cty test</code>, <code>soup rpc test</code>, <code>soup wire test</code> (replaced by <code>soup test &lt;suite&gt;</code>).</li> <li>Individual Go harnesses: <code>go-cty</code>, <code>go-hcl</code>, <code>go-rpc</code>, <code>go-wire</code> (replaced by unified <code>soup-go</code>).</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>All references to old harness names updated to <code>soup-go</code>.</li> <li>All file paths updated to new harness binary location.</li> <li>Migration guide created to help users transition.</li> <li>Stale status documents moved to historical archive.</li> <li>Documentation build verification: <code>mkdocs build --strict</code> passes with no errors.</li> </ul>"},{"location":"CHANGELOG/#known-issues","title":"Known Issues","text":"<ul> <li>The <code>pyvider-builder</code> project requires a significant refactoring to consolidate Go and Python logic.</li> <li>The conformance test suite structure needs to be reorganized according to the architectural plan to better separate unit, integration, and other test types.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-tofusoup","title":"What is TofuSoup?","text":"<p>TofuSoup is a cross-language conformance testing suite for the OpenTofu/Terraform ecosystem. See What is TofuSoup? for details.</p>"},{"location":"faq/#who-should-use-tofusoup","title":"Who should use TofuSoup?","text":"<p>Provider developers, library authors, QA engineers, and anyone building Terraform-compatible tools in languages other than Go.</p>"},{"location":"faq/#is-tofusoup-affiliated-with-hashicorp-or-opentofu","title":"Is TofuSoup affiliated with HashiCorp or OpenTofu?","text":"<p>No. TofuSoup is an independent project by provide.io that helps ensure compatibility across Terraform implementations.</p>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"faq/#how-do-i-install-tofusoup","title":"How do I install TofuSoup?","text":"<pre><code>pip install tofusoup\n</code></pre> <p>See Installation Guide for details.</p>"},{"location":"faq/#do-i-need-go-installed","title":"Do I need Go installed?","text":"<p>Yes, if you want to build and use test harnesses. The harnesses provide reference Go implementations for compatibility testing.</p>"},{"location":"faq/#what-python-versions-are-supported","title":"What Python versions are supported?","text":"<p>Python 3.11 and higher.</p>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#how-do-i-run-conformance-tests","title":"How do I run conformance tests?","text":"<pre><code>soup test all          # Run all tests\nsoup test cty          # Test CTY compatibility\nsoup test rpc          # Test RPC compatibility\n</code></pre> <p>See Running Conformance Tests.</p>"},{"location":"faq/#how-do-i-test-across-multiple-terraform-versions","title":"How do I test across multiple Terraform versions?","text":"<p>Use the <code>stir</code> command with matrix testing:</p> <pre><code>soup stir tests/ --matrix\n</code></pre> <p>Configure versions in <code>soup.toml</code>. See Matrix Testing.</p>"},{"location":"faq/#can-i-use-tofusoup-in-cicd","title":"Can I use TofuSoup in CI/CD?","text":"<p>Yes! TofuSoup is designed for CI/CD integration. All commands support non-interactive execution and return appropriate exit codes.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#tests-are-failing-with-connection-timeout","title":"Tests are failing with \"Connection timeout\"","text":"<p>This usually means the Go server harness isn't starting properly. Check: 1. Go is installed and in PATH 2. Harnesses are built: <code>soup harness build --all</code> 3. Firewall isn't blocking connections</p> <p>See Troubleshooting for more.</p>"},{"location":"faq/#binary-mismatch-errors-in-wire-tests","title":"Binary mismatch errors in wire tests","text":"<p>This indicates Python and Go implementations are producing different binary output. This is a real compatibility issue that needs investigation. See the Wire Protocol Guide.</p>"},{"location":"faq/#command-not-found-soup","title":"Command not found: soup","text":"<p>Ensure Python's bin directory is in your PATH. See Installation Troubleshooting.</p>"},{"location":"faq/#development","title":"Development","text":""},{"location":"faq/#how-do-i-contribute-to-tofusoup","title":"How do I contribute to TofuSoup?","text":"<p>See CONTRIBUTING.md.</p>"},{"location":"faq/#how-do-i-add-a-new-conformance-test","title":"How do I add a new conformance test?","text":"<p>Tests are in <code>conformance/</code> directory. Follow the pattern of existing tests and use the <code>souptest_</code> prefix.</p>"},{"location":"faq/#can-i-use-tofusoup-with-my-own-provider","title":"Can I use TofuSoup with my own provider?","text":"<p>Yes! TofuSoup's tools work with any Terraform provider. Use the CLI tools for validation and the test framework for compatibility testing.</p>"},{"location":"faq/#compatibility","title":"Compatibility","text":""},{"location":"faq/#which-terraform-versions-are-supported","title":"Which Terraform versions are supported?","text":"<p>TofuSoup supports Terraform 1.0+ and OpenTofu 1.6+. Configure specific versions in <code>soup.toml</code> for matrix testing.</p>"},{"location":"faq/#does-tofusoup-work-with-pyvider","title":"Does TofuSoup work with Pyvider?","text":"<p>Yes! TofuSoup and Pyvider are complementary projects from provide.io. TofuSoup provides the testing infrastructure, while Pyvider provides the provider framework.</p>"},{"location":"faq/#can-i-test-non-python-providers","title":"Can I test non-Python providers?","text":"<p>TofuSoup's CLI tools work with any language. The conformance tests currently focus on Python-Go compatibility, but the framework is extensible.</p>"},{"location":"faq/#more-questions","title":"More Questions?","text":"<ul> <li>Check Troubleshooting</li> <li>Browse GitHub Issues</li> <li>Read the Glossary for term definitions</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"<p>Definitions of terms used in TofuSoup and the Terraform ecosystem.</p>"},{"location":"glossary/#a","title":"A","text":"<p>Attribute : A named field in a Terraform resource, data source, or provider schema.</p>"},{"location":"glossary/#c","title":"C","text":"<p>Conformance Test : A test that verifies an implementation correctly follows a specification, ensuring cross-language compatibility.</p> <p>CTY (Configuration Type) : Terraform's type system for configuration values. Includes primitives (string, number, bool), collections (list, map, set), and structural types (object, tuple).</p>"},{"location":"glossary/#d","title":"D","text":"<p>Data Source : A Terraform component that reads external data for use in configurations. Read-only resource.</p> <p>Dynamic Type : A CTY type that can hold any value type. Used when the type isn't known until runtime.</p>"},{"location":"glossary/#h","title":"H","text":"<p>Harness : A test harness is a reference implementation used for compatibility testing. TofuSoup includes Go harnesses.</p> <p>HCL (HashiCorp Configuration Language) : The configuration language used by Terraform. Combines declarative resource definitions with expressions.</p>"},{"location":"glossary/#m","title":"M","text":"<p>Matrix Testing : Testing a provider or configuration across multiple versions of Terraform/OpenTofu simultaneously.</p> <p>MessagePack : Binary serialization format used in Terraform's wire protocol. More compact than JSON.</p>"},{"location":"glossary/#o","title":"O","text":"<p>OpenTofu : Open-source fork of Terraform maintained by the Linux Foundation. API-compatible with Terraform 1.5.x.</p>"},{"location":"glossary/#p","title":"P","text":"<p>Provider : A Terraform plugin that manages resources for a specific service or platform (AWS, Azure, etc.).</p> <p>Pyvider : Python framework for building Terraform providers. Part of the provide.io ecosystem.</p>"},{"location":"glossary/#r","title":"R","text":"<p>Resource : A Terraform component representing infrastructure that can be created, updated, and destroyed.</p> <p>RPC (Remote Procedure Call) : Communication protocol used between Terraform and providers. Uses gRPC in protocol version 6+.</p>"},{"location":"glossary/#s","title":"S","text":"<p>Schema : Definition of attributes, blocks, and behaviors for a provider, resource, or data source.</p> <p>Stir : TofuSoup's matrix testing framework for running tests across multiple tool versions.</p>"},{"location":"glossary/#t","title":"T","text":"<p>Terraform : Infrastructure-as-code tool by HashiCorp. Provisions and manages cloud resources using declarative configuration.</p> <p>Test Suite : Collection of related conformance tests (e.g., CTY suite, RPC suite, wire protocol suite).</p> <p>TofuSoup : Cross-language conformance testing framework for the Terraform ecosystem. The tool you're using now!</p>"},{"location":"glossary/#u","title":"U","text":"<p>Unknown Value : A CTY value whose actual value isn't known yet (typically during <code>terraform plan</code>). Different from null.</p>"},{"location":"glossary/#w","title":"W","text":"<p>Wire Protocol : Binary protocol for communication between Terraform and providers. Uses MessagePack + Base64 encoding.</p> <p>Workenv : Workspace environment manager for handling multiple Terraform/OpenTofu versions.</p>"},{"location":"glossary/#related-resources","title":"Related Resources","text":"<ul> <li>Core Concepts</li> <li>What is TofuSoup?</li> <li>FAQ</li> <li>Terraform Glossary</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when using TofuSoup.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#command-not-found-soup","title":"Command not found: soup","text":"<p>Symptom: <code>soup: command not found</code> after installation</p> <p>Solutions: 1. Verify installation:    <pre><code>pip list | grep tofusoup\n</code></pre></p> <ol> <li> <p>Check Python bin is in PATH:    <pre><code>python -m pip show tofusoup\nwhich soup\n</code></pre></p> </li> <li> <p>Try running via Python module:    <pre><code>python -m tofusoup.cli --help\n</code></pre></p> </li> <li> <p>Add Python bin to PATH (macOS/Linux):    <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#module-import-errors","title":"Module import errors","text":"<p>Symptom: <code>ModuleNotFoundError</code> when running soup</p> <p>Solution: <pre><code># For development installations\ncd /path/to/tofusoup\nuv sync\n\n# For pip installations\npip install --upgrade tofusoup[all]\n</code></pre></p>"},{"location":"troubleshooting/#harness-issues","title":"Harness Issues","text":""},{"location":"troubleshooting/#go-harness-build-failures","title":"Go harness build failures","text":"<p>Symptom: <code>soup harness build</code> fails</p> <p>Solutions: 1. Check Go installation:    <pre><code>go version  # Should be 1.21+\n</code></pre></p> <ol> <li> <p>Check GOPATH:    <pre><code>go env GOPATH\n</code></pre></p> </li> <li> <p>Try building manually:    <pre><code>cd src/tofusoup/harness/go/soup-go\ngo build -o ../../../../harnesses/bin/soup-go\n</code></pre></p> </li> <li> <p>Check for Go module issues:    <pre><code>go mod tidy\ngo mod verify\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#harness-cli-verification-fails","title":"Harness CLI verification fails","text":"<p>Symptom: <code>soup harness verify-cli</code> fails</p> <p>Solution: <pre><code># Rebuild the harness\nsoup harness build soup-go\n\n# Verify it runs\n./harnesses/bin/soup-go --version\n\n# Check logs\nsoup harness verify-cli soup-go --verbose\n</code></pre></p>"},{"location":"troubleshooting/#test-failures","title":"Test Failures","text":""},{"location":"troubleshooting/#rpc-connection-timeouts","title":"RPC connection timeouts","text":"<p>Symptom: Tests fail with \"Connection timeout after 30s\"</p> <p>Causes &amp; Solutions:</p> <ol> <li> <p>Go server not starting:    <pre><code># Check server logs\ncat /tmp/tofusoup_plugin_debug.log\n\n# Try starting server manually\nsoup rpc server-start\n</code></pre></p> </li> <li> <p>Firewall blocking:</p> </li> <li>Check firewall settings</li> <li>Allow Python and Go executables</li> <li> <p>Test on localhost without firewall</p> </li> <li> <p>Port already in use:    <pre><code># Check for processes using gRPC ports\nlsof -i :50051\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#wire-protocol-binary-mismatches","title":"Wire protocol binary mismatches","text":"<p>Symptom: \"Binary mismatch for test 'X'\"</p> <p>This is a real compatibility issue! It means Python and Go are producing different binary output.</p> <p>Debug steps: 1. View the specific test:    <pre><code>pytest conformance/wire/souptest_wire_python_vs_go.py::test_X -vv\n</code></pre></p> <ol> <li> <p>Compare binary outputs:    <pre><code># See wire protocol guide for debugging\nsoup wire encode input.json python.out\n./harnesses/bin/soup-go wire encode input.json go.out\ndiff &lt;(xxd python.out) &lt;(xxd go.out)\n</code></pre></p> </li> <li> <p>Report the issue on GitHub with test details</p> </li> </ol>"},{"location":"troubleshooting/#cty-type-errors","title":"CTY type errors","text":"<p>Symptom: <code>'UnrefinedUnknownValue' object is not subscriptable</code></p> <p>Solution: This is a known issue with unknown values. Update <code>pyvider-cty</code>: <pre><code>pip install --upgrade pyvider-cty\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#tests-running-slowly","title":"Tests running slowly","text":"<p>Solutions: 1. Run tests in parallel:    <pre><code>pytest -n auto\n</code></pre></p> <ol> <li> <p>Run specific test suites:    <pre><code>soup test cty  # Instead of 'soup test all'\n</code></pre></p> </li> <li> <p>Skip slow tests:    <pre><code>pytest -m \"not slow\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#harness-build-taking-too-long","title":"Harness build taking too long","text":"<p>Solution: <pre><code># Use cached builds\nsoup harness build --cache\n\n# Build only what's needed\nsoup harness build soup-go  # Instead of --all\n</code></pre></p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#souptoml-not-found","title":"soup.toml not found","text":"<p>Symptom: \"Configuration not loaded\" warnings</p> <p>Solution: TofuSoup searches for <code>soup.toml</code> in: 1. Path specified by <code>--config-file</code> 2. Current directory (<code>./soup.toml</code>)</p> <p>Create one if needed: <pre><code>cat &gt; soup.toml &lt;&lt;EOF\n[global_settings]\ndefault_python_log_level = \"INFO\"\nEOF\n</code></pre></p>"},{"location":"troubleshooting/#invalid-configuration","title":"Invalid configuration","text":"<p>Symptom: <code>TofuSoupConfigError</code></p> <p>Solution: <pre><code># Validate syntax\npython -c \"import tomllib; tomllib.load(open('soup.toml', 'rb'))\"\n\n# Check configuration\nsoup config show\n</code></pre></p>"},{"location":"troubleshooting/#matrix-testing-issues","title":"Matrix Testing Issues","text":""},{"location":"troubleshooting/#stir-command-not-finding-tests","title":"stir command not finding tests","text":"<p>Symptom: \"No tests found\"</p> <p>Solutions: 1. Check directory structure:    <pre><code>ls -la tests/\n</code></pre></p> <ol> <li> <p>Verify test files have <code>main.tf</code>:    <pre><code>find tests/ -name \"main.tf\"\n</code></pre></p> </li> <li> <p>Use correct path:    <pre><code>soup stir tests/  # Not just 'tests'\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#matrix-versions-not-working","title":"Matrix versions not working","text":"<p>Symptom: Tests only run against one version</p> <p>Solution: Configure matrix in <code>soup.toml</code>: <pre><code>[workenv.matrix.versions]\nterraform = [\"1.5.7\", \"1.6.0\"]\ntofu = [\"1.8.0\"]\n</code></pre></p> <p>Then use <code>--matrix</code> flag: <pre><code>soup stir tests/ --matrix\n</code></pre></p>"},{"location":"troubleshooting/#getting-more-help","title":"Getting More Help","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable debug logging","text":"<pre><code># CLI debug mode\nsoup --log-level DEBUG command\n\n# Python logging\nexport TOFUSOUP_LOG_LEVEL=DEBUG\nsoup command\n</code></pre>"},{"location":"troubleshooting/#check-logs","title":"Check logs","text":"<pre><code># Plugin debug log\ncat /tmp/tofusoup_plugin_debug.log\n\n# Test output\nsoup/output/cli_verification/\n</code></pre>"},{"location":"troubleshooting/#report-issues","title":"Report Issues","text":"<p>If you can't resolve the issue:</p> <ol> <li>Check FAQ</li> <li>Search GitHub Issues</li> <li>Create a new issue with:</li> <li>TofuSoup version (<code>soup --version</code>)</li> <li>Python version (<code>python --version</code>)</li> <li>Go version (<code>go version</code>)</li> <li>Full error message</li> <li>Steps to reproduce</li> </ol>"},{"location":"troubleshooting/#see-also","title":"See Also","text":"<ul> <li>FAQ</li> <li>Installation Guide</li> <li>Configuration Reference</li> </ul>"},{"location":"architecture/01-overview/","title":"Architecture Overview","text":"<p>The <code>TofuSoup</code> project is a modular, CLI-driven framework designed for cross-language conformance testing and development tooling within the OpenTofu ecosystem.</p> <p>The architecture is segmented into several key domains:</p> <ol> <li> <p>Main CLI (<code>cli.py</code>): The central entry point, built with <code>click</code>. It uses a <code>LazyGroup</code> to ensure fast startup times by only loading the code for a specific subcommand when it is invoked.</p> </li> <li> <p>Core Utilities (<code>common/</code>): Provides shared services for all other components, including:</p> <ul> <li>Configuration (<code>config.py</code>): Loads and parses the <code>soup.toml</code> file.</li> <li>Exceptions (<code>exceptions.py</code>): Defines custom, project-specific exceptions.</li> <li>Rich Output (<code>rich_utils.py</code>): Helpers for creating enhanced terminal output with the <code>rich</code> library.</li> </ul> </li> <li> <p>Protocol/Component Tooling: Each core technology (<code>cty</code>, <code>hcl</code>, <code>rpc</code>, <code>wire</code>) has a dedicated module containing its CLI implementation and business logic. This modular design makes the system easy to extend.</p> </li> <li> <p>Harness Management (<code>harness/</code>): This component is responsible for the lifecycle of external test harnesses, which are primarily Go binaries. It abstracts the details of building, locating, and cleaning these executables, with behavior configurable via <code>soup.toml</code>.</p> </li> <li> <p>Conformance Testing (<code>testing/</code>, <code>conformance/</code>): This is the core of the suite. The <code>testing/</code> module provides the <code>soup test</code> CLI and logic for invoking <code>pytest</code>. The actual test suites reside in <code>conformance/</code>.</p> </li> <li> <p>Documentation (<code>docs/</code>): Comprehensive documentation organized by Di\u00e1taxis principles, including getting started guides, tutorials, reference material, and architecture documentation. Documentation generation for providers has been moved to the separate <code>plating</code> package.</p> </li> </ol>"},{"location":"architecture/02-conformance-testing-strategy/","title":"Conformance Testing Strategy","text":"<p>This document outlines the architecture for the TofuSoup conformance testing suite.</p>"},{"location":"architecture/02-conformance-testing-strategy/#testing-philosophy-souptest-vs-pytest","title":"Testing Philosophy: <code>souptest</code> vs. <code>pytest</code>","text":"<p>A core distinction in this project is the separation of concerns in testing: -   Conformance Tests (<code>souptest_*.py</code>): These tests, located in <code>tofusoup/conformance/</code>, are for verifying cross-language compatibility. They compare the behavior of Python implementations against the canonical Go harnesses. They are run via the <code>soup test</code> command. -   Internal Tests (<code>test_*.py</code>): These are standard unit and integration tests for the <code>tofusoup</code> tool itself. They are located in <code>tofusoup/tests/</code> and are run using <code>pytest</code> directly.</p>"},{"location":"architecture/02-conformance-testing-strategy/#architectural-design","title":"Architectural Design","text":"<p>The conformance suite is organized into a hierarchical and purpose-driven structure to ensure clarity, prevent duplication, and provide a scalable foundation for comprehensive testing.</p>"},{"location":"architecture/02-conformance-testing-strategy/#design-principles","title":"Design Principles","text":"<ol> <li>Hierarchical Organization: Reflect test complexity and dependencies.</li> <li>Cross-Cutting Separation: Create dedicated areas for security, performance, and integration.</li> <li>Single Source of Truth: Eliminate duplication in test scenarios and fixtures.</li> <li>Clear Purpose: Each directory has an explicit, non-overlapping responsibility.</li> </ol>"},{"location":"architecture/02-conformance-testing-strategy/#directory-structure","title":"Directory Structure","text":"<pre><code>conformance/\n\u251c\u2500\u2500 README.md                           # Testing strategy and execution guide\n\u251c\u2500\u2500 conftest.py                         # Global fixtures and matrix configurations\n\u2502\n\u251c\u2500\u2500 unit/                               # Individual protocol conformance\n\u2502   \u251c\u2500\u2500 souptest_cty_conformance.py\n\u2502   \u251c\u2500\u2500 souptest_wire_conformance.py\n\u2502   \u2514\u2500\u2500 souptest_rpc_conformance.py\n\u2502\n\u251c\u2500\u2500 integration/                        # Cross-protocol integration testing\n\u2502   \u251c\u2500\u2500 souptest_full_stack_matrix.py      # Complete CTY\u2192Wire\u2192RPC flow\n\u2502   \u2514\u2500\u2500 souptest_provider_lifecycle.py     # Full Terraform provider scenarios\n\u2502\n\u251c\u2500\u2500 security/                           # Security-focused conformance\n\u2502   \u2514\u2500\u2500 souptest_crypto_matrix.py          # All cipher/curve combinations\n\u2502\n\u251c\u2500\u2500 scenarios/                          # End-to-end BDD-style scenario testing\n\u2502   \u251c\u2500\u2500 terraform_equivalence/\n\u2502   \u2502   \u251c\u2500\u2500 basic_operations.feature\n\u2502   \u2502   \u2514\u2500\u2500 step_definitions/\n\u2502   \u2514\u2500\u2500 souptest_scenario_runner.py\n\u2502\n\u2514\u2500\u2500 fixtures/                           # Shared test data and configuration\n    \u251c\u2500\u2500 cty_data/\n    \u2514\u2500\u2500 certificates/\n</code></pre> <p>This architecture provides a robust framework for implementing matrix-based testing and ensuring systematic validation of TofuSoup components against their canonical Go counterparts.</p>"},{"location":"architecture/03-rpc-matrix-specification/","title":"RPC K/V Matrix Testing Specification","text":"<p>This document specifies the design for a systematic, matrix-based test suite for the RPC Key/Value store example. It focuses on covering all combinations of client/server language implementations and cryptographic configurations.</p>"},{"location":"architecture/03-rpc-matrix-specification/#testing-matrix-dimensions","title":"Testing Matrix Dimensions","text":""},{"location":"architecture/03-rpc-matrix-specification/#1-language-implementation-combinations","title":"1. Language Implementation Combinations","text":"<ul> <li>Client Languages: <code>go</code>, <code>pyvider</code></li> <li>Server Languages: <code>go</code>, <code>pyvider</code></li> <li>Total Combinations: 4 client-server pairs</li> </ul>"},{"location":"architecture/03-rpc-matrix-specification/#2-authentication-crypto-matrix","title":"2. Authentication &amp; Crypto Matrix","text":"<ul> <li>Authentication Mode: <code>auto_mtls</code> (Automatic mutual TLS with certificate generation)</li> <li>RSA Key Sizes: <code>rsa_2048</code>, <code>rsa_4096</code></li> <li>Elliptic Curve Options: <code>ec_256</code> (P-256), <code>ec_384</code> (P-384), <code>ec_521</code> (P-521)</li> </ul> <p>This results in 5 unique cryptographic configurations to be tested against each of the 4 language combinations, for a total of 20 distinct test cases.</p>"},{"location":"architecture/03-rpc-matrix-specification/#implementation-specification","title":"Implementation Specification","text":"<p>The test suite will be implemented using <code>pytest</code> parameterization.</p>"},{"location":"architecture/03-rpc-matrix-specification/#1-matrix-configuration-matrix_configpy","title":"1. Matrix Configuration (<code>matrix_config.py</code>)","text":"<p>A central file will define the parameters for the matrix, generating a list of <code>pytest.param</code> objects. Each parameter set will contain the client language, server language, and a <code>CryptoConfig</code> object detailing the required mTLS setup.</p>"},{"location":"architecture/03-rpc-matrix-specification/#2-test-implementation-test_rpc_kv_matrixpy","title":"2. Test Implementation (<code>test_rpc_kv_matrix.py</code>)","text":"<p>A single, parameterized test function, <code>test_rpc_kv_operations_matrix</code>, will execute the core test logic for every combination generated by the matrix configuration. The test logic will: 1.  Create an isolated temporary directory for the test run. 2.  Start the appropriate server (Go or Python) with the specified crypto configuration. 3.  Create a client (Go or Python) configured to connect to the server. 4.  Perform <code>PUT</code>, <code>GET</code>, and <code>DELETE</code> operations, verifying the correctness of each. 5.  Test error handling, such as getting a non-existent key.</p>"},{"location":"architecture/03-rpc-matrix-specification/#3-harness-factory-harnesskv_factorypy","title":"3. Harness Factory (<code>harness/kv_factory.py</code>)","text":"<p>Factory functions (<code>create_kv_server</code>, <code>create_kv_client</code>) will abstract the creation of server and client instances. Based on the <code>language</code> parameter, these factories will return a running instance of either the Go or Python harness, configured for the specific test.</p> <p>This focused specification ensures systematic validation of RPC K/V functionality across all required language and cryptographic combinations while maintaining clean, maintainable test code.</p>"},{"location":"architecture/05-wire-protocol-details/","title":"Terraform Object Wire Protocol: Dynamic Type Encoding","text":"<p>This document details how CTY Dynamic Values (<code>cty.DynamicPseudoType</code>) are encoded and decoded in the TofuSoup project, ensuring compatibility between the Go reference harness and the Python <code>pyvider</code> libraries.</p>"},{"location":"architecture/05-wire-protocol-details/#dynamic-value-wire-format","title":"Dynamic Value Wire Format","text":"<p>When a <code>cty.DynamicVal</code> is transmitted using the Terraform Object Wire Protocol (which uses MessagePack), it is encoded as a 2-element MessagePack array:</p> <pre><code>[ &lt;type_specification_bytes&gt;, &lt;value_bytes&gt; ]\n</code></pre> <ol> <li> <p><code>&lt;type_specification_bytes&gt;</code> (First Element):</p> <ul> <li>This element represents the concrete type of the value that the dynamic value actually holds.</li> <li>Encoding Process:<ol> <li>The concrete <code>cty.Type</code> of the value is determined (e.g., <code>cty.String</code>).</li> <li>This type is marshalled into its JSON string representation (e.g., <code>\"string\"</code> or <code>[\"list\",\"number\"]</code>).</li> <li>The UTF-8 bytes of this JSON string are then encoded as a MessagePack binary data type (<code>bin</code> family).</li> </ol> </li> </ul> </li> <li> <p><code>&lt;value_bytes&gt;</code> (Second Element):</p> <ul> <li>This element is the standard MessagePack encoding of the concrete <code>cty.Value</code> itself.</li> </ul> </li> </ol>"},{"location":"architecture/05-wire-protocol-details/#example","title":"Example","text":"<p>Consider a dynamic value holding <code>cty.StringVal(\"hello\")</code>.</p> <ol> <li>Concrete Type: <code>cty.String</code></li> <li>JSON Type String: The literal string <code>\"string\"</code>.</li> <li><code>&lt;type_specification_bytes&gt;</code>: The MessagePack <code>bin</code> encoding of the UTF-8 bytes for <code>\"string\"</code>.<ul> <li>Hex: <code>c40822737472696e6722</code></li> </ul> </li> <li>Concrete Value: <code>cty.StringVal(\"hello\")</code></li> <li><code>&lt;value_bytes&gt;</code>: The MessagePack <code>str</code> encoding of \"hello\".<ul> <li>Hex: <code>a568656c6c6f</code></li> </ul> </li> <li>Final 2-Element Msgpack Array:<ul> <li>Hex: <code>92c40822737472696e6722a568656c6c6f</code></li> </ul> </li> <li>Base64 Representation: <code>ksQIInN0cmluZyKlaGVsbG8=</code></li> </ol> <p>This method ensures that the type constraint of the dynamic value is clearly and unambiguously encoded in the wire format, allowing the decoding side to correctly interpret the subsequent value bytes.</p>"},{"location":"architecture/06-polyglot-cli-strategy/","title":"Polyglot CLI Strategy","text":"<p>This document outlines the architectural strategy for creating a family of TofuSoup command-line interfaces across multiple languages, ensuring a consistent developer experience and robust, symmetric testing capabilities.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#1-core-principle-feature-parity","title":"1. Core Principle: Feature Parity","text":"<p>The primary goal is to achieve feature parity between the main Python-based <code>soup</code> CLI and its counterparts in other languages, starting with Go (<code>soup-go</code>). This means that where applicable, a developer should be able to use the same commands, subcommands, and flags in <code>soup-go</code> as they would in <code>soup</code>.</p> <p>This creates a predictable and powerful ecosystem where developers can use the tools in their preferred language, and the testing suite can validate Python components against Go components using an identical set of commands.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#2-go-implementation-soup-go","title":"2. Go Implementation: <code>soup-go</code>","text":"<p>The Go implementation of the TofuSoup CLI will be named <code>soup-go</code> and will be built using the Cobra library to provide a robust and familiar CLI structure. The existing Go harnesses (<code>go-cty</code>, <code>go-hcl</code>, etc.) will be refactored and integrated into this single, unified <code>soup-go</code> binary.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#target-soup-go-structure","title":"Target <code>soup-go</code> Structure","text":"<p>The <code>soup-go</code> CLI will mirror the structure of the Python <code>soup</code> CLI.</p> <p>Hypothetical <code>soup-go --help</code> Output: <pre><code>A Go implementation of the TofuSoup conformance and utility toolkit.\n\nUsage:\n  soup-go [command]\n\nAvailable Commands:\n  cty         Utilities for CTY data (view, convert, validate)\n  hcl         Utilities for HCL file processing (view, convert)\n  rpc         Utilities for testing RPC components (kv get, kv put)\n  wire        Tools for encoding/decoding Terraform Wire Protocol objects\n  help        Help about any command\n\nFlags:\n  -h, --help          help for soup-go\n      --log-level string   Set the logging level (default \"info\")\n</code></pre></p>"},{"location":"architecture/06-polyglot-cli-strategy/#3-role-in-conformance-testing","title":"3. Role in Conformance Testing","text":"<p>This strategy transforms the Go harnesses from simple, single-purpose test executables into a full-featured, language-specific implementation of the TofuSoup toolkit. This enables a powerful, symmetric testing model:</p> <ul> <li>Python vs. Go: The <code>soup test</code> command can invoke <code>soup-go</code> to get canonical outputs for comparison.</li> <li>Go vs. Python: A future Go-based test runner could invoke the Python <code>soup</code> CLI to validate Go components.</li> </ul> <p>This ensures that the entire toolchain, not just the underlying libraries, is conformant across languages.</p>"},{"location":"architecture/07-stock-service-design/","title":"Stock Service Design Document","text":""},{"location":"architecture/07-stock-service-design/#overview","title":"Overview","text":"<p>The Stock service is a multi-language gRPC service designed to test cross-language compatibility without the complexity of plugin handshakes. It extends the simple key-value pattern from kvproto with additional gRPC patterns (streaming, bidirectional) to provide comprehensive testing coverage.</p>"},{"location":"architecture/07-stock-service-design/#motivation","title":"Motivation","text":""},{"location":"architecture/07-stock-service-design/#current-state","title":"Current State","text":"<ul> <li>TofuSoup's RPC tests focus on plugin protocol compatibility (go-plugin framework)</li> <li>The existing kvproto project tests direct gRPC but lives outside TofuSoup</li> <li>Plugin protocol adds complexity when testing basic gRPC interoperability</li> </ul>"},{"location":"architecture/07-stock-service-design/#goals","title":"Goals","text":"<ol> <li>Test pure gRPC compatibility across 10+ languages</li> <li>Provide a standard service that exercises all gRPC communication patterns</li> <li>Integrate kvproto's multi-language implementations into TofuSoup</li> <li>Enable testing of pyvider servers in <code>--force</code> mode with non-plugin clients</li> </ol>"},{"location":"architecture/07-stock-service-design/#architecture","title":"Architecture","text":""},{"location":"architecture/07-stock-service-design/#service-name-stock","title":"Service Name: Stock","text":"<p>The name \"Stock\" works on multiple levels: - Soup stock: The base/foundation of soup (fitting TofuSoup theme) - Inventory stock: Storage metaphor for key-value operations - Stock market: Streaming updates and trading metaphor for bidirectional streams</p>"},{"location":"architecture/07-stock-service-design/#directory-structure","title":"Directory Structure","text":"<pre><code>tofusoup/\n\u251c\u2500\u2500 conformance/\n\u2502   \u2514\u2500\u2500 stock/              # Stock service conformance tests\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 conftest.py\n\u2502       \u251c\u2500\u2500 matrix_config.py\n\u2502       \u2514\u2500\u2500 souptest_stock_matrix.py\n\u251c\u2500\u2500 stock/                  # All Stock implementations\n\u2502   \u251c\u2500\u2500 proto/\n\u2502   \u2502   \u2514\u2500\u2500 stock.proto     # Single source of truth\n\u2502   \u251c\u2500\u2500 go/\n\u2502   \u2502   \u251c\u2500\u2500 cmd/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 client/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 server/\n\u2502   \u2502   \u251c\u2500\u2500 go.mod\n\u2502   \u2502   \u2514\u2500\u2500 Makefile\n\u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u251c\u2500\u2500 stock_client.py\n\u2502   \u2502   \u251c\u2500\u2500 stock_server.py\n\u2502   \u2502   \u2514\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u251c\u2500\u2500 pom.xml\n\u2502   \u2502   \u2514\u2500\u2500 src/main/java/\n\u2502   \u251c\u2500\u2500 ruby/\n\u2502   \u251c\u2500\u2500 rust/\n\u2502   \u251c\u2500\u2500 csharp/\n\u2502   \u2514\u2500\u2500 ... (other languages)\n\u2514\u2500\u2500 src/tofusoup/\n    \u2514\u2500\u2500 stock/              # Stock CLI integration\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 cli.py          # CLI commands\n        \u2514\u2500\u2500 harness.py      # Build/management logic\n</code></pre>"},{"location":"architecture/07-stock-service-design/#proto-definition","title":"Proto Definition","text":"<pre><code>service Stock {\n    // Basic KV operations (unary) - backwards compatible\n    rpc Get(GetRequest) returns (GetResponse);\n    rpc Put(PutRequest) returns (Empty);\n\n    // Server streaming - monitor changes\n    rpc Monitor(WatchRequest) returns (stream WatchEvent);\n\n    // Client streaming - batch operations\n    rpc Batch(stream BatchItem) returns (BatchSummary);\n\n    // Bidirectional - trading simulation\n    rpc Trade(stream TradeOrder) returns (stream TradeFill);\n\n    // Status/health check\n    rpc Inventory(Empty) returns (InventoryStatus);\n}\n</code></pre>"},{"location":"architecture/07-stock-service-design/#cli-design","title":"CLI Design","text":""},{"location":"architecture/07-stock-service-design/#language-first-commands","title":"Language-First Commands","text":"<pre><code># Start servers\nsoup stock go server --port 50051\nsoup stock python server --tls-mode auto\nsoup stock java server --cert-file server.crt\n\n# Run clients\nsoup stock ruby client get mykey --server localhost:50051\nsoup stock rust client put mykey \"value\" --server localhost:50051\nsoup stock go client monitor \"prefix/*\" --server localhost:50051\n\n# Convenience shortcuts (defaults to Python)\nsoup stock get mykey\nsoup stock put mykey \"value\"\nsoup stock inventory\n</code></pre>"},{"location":"architecture/07-stock-service-design/#why-not-under-soup-rpc","title":"Why Not Under <code>soup rpc</code>?","text":"<ol> <li>Clear Separation: </li> <li><code>soup rpc</code> = Plugin protocol (handshake, broker, stdio)</li> <li> <p><code>soup stock</code> = Direct gRPC (no handshake)</p> </li> <li> <p>Different Use Cases:</p> </li> <li><code>soup rpc</code> tests Terraform provider compatibility</li> <li> <p><code>soup stock</code> tests language interoperability</p> </li> <li> <p>Simpler Mental Model:</p> </li> <li>Stock is a standalone service, not a variant of RPC</li> </ol>"},{"location":"architecture/07-stock-service-design/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"architecture/07-stock-service-design/#phase-1-core-languages-week-1","title":"Phase 1: Core Languages (Week 1)","text":"<ul> <li>[ ] Python implementation (base reference)</li> <li>[ ] Go implementation (performance baseline)</li> <li>[ ] Proto compilation setup for all languages</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-2-migrate-kvproto-week-2","title":"Phase 2: Migrate kvproto (Week 2)","text":"<ul> <li>[ ] Move existing kvproto implementations</li> <li>[ ] Update to use Stock proto definition</li> <li>[ ] Standardize CLI interface across languages</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-3-testing-infrastructure-week-3","title":"Phase 3: Testing Infrastructure (Week 3)","text":"<ul> <li>[ ] Matrix test configuration</li> <li>[ ] Performance benchmarks</li> <li>[ ] TLS/mTLS test scenarios</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-4-additional-languages-week-4","title":"Phase 4: Additional Languages (Week 4+)","text":"<ul> <li>[ ] Java, Ruby, C#, Rust implementations</li> <li>[ ] JavaScript/Node.js, C++, PHP</li> <li>[ ] Kotlin, Scala, Swift (stretch goals)</li> </ul>"},{"location":"architecture/07-stock-service-design/#testing-matrix","title":"Testing Matrix","text":""},{"location":"architecture/07-stock-service-design/#dimensions","title":"Dimensions","text":"<ol> <li>Client Language: 10+ implementations</li> <li>Server Language: 10+ implementations  </li> <li>TLS Configuration: none, server-only, mTLS</li> <li>Operations: get/put, streaming, batch, bidirectional</li> </ol>"},{"location":"architecture/07-stock-service-design/#example-test-cases","title":"Example Test Cases","text":"<ul> <li>Python client \u2192 Go server (mTLS, streaming)</li> <li>Java client \u2192 Ruby server (no TLS, batch operations)</li> <li>Rust client \u2192 Python server (server TLS, bidirectional)</li> </ul> <p>Total potential combinations: 10 \u00d7 10 \u00d7 3 \u00d7 4 = 1,200 tests</p>"},{"location":"architecture/07-stock-service-design/#optimized-test-subsets","title":"Optimized Test Subsets","text":"<ul> <li>Quick: 3 clients \u00d7 3 servers \u00d7 1 TLS \u00d7 2 ops = 18 tests</li> <li>Standard: 5 clients \u00d7 5 servers \u00d7 2 TLS \u00d7 3 ops = 150 tests</li> <li>Full: All combinations (weekend run)</li> </ul>"},{"location":"architecture/07-stock-service-design/#integration-with-existing-systems","title":"Integration with Existing Systems","text":""},{"location":"architecture/07-stock-service-design/#works-with-pyvider-force-mode","title":"Works With pyvider --force Mode","text":"<pre><code># Start pyvider server without handshake\npython my_provider.py provide --force --port 50051\n\n# Connect with any Stock client\nsoup stock java client get tf_resource_123\nsoup stock go client monitor \"tf_state/*\"\n</code></pre>"},{"location":"architecture/07-stock-service-design/#comparison-with-plugin-rpc","title":"Comparison with Plugin RPC","text":"Feature Plugin RPC (<code>soup rpc</code>) Stock (<code>soup stock</code>) Handshake Required None Port Negotiation Dynamic Fixed Stdio Forwarding Yes No Language Support Go + Python 10+ languages Use Case Terraform providers General gRPC testing"},{"location":"architecture/07-stock-service-design/#success-metrics","title":"Success Metrics","text":"<ol> <li>Coverage: All 10+ languages have working implementations</li> <li>Compatibility: 95%+ of cross-language tests pass</li> <li>Performance: Benchmark data for each language pair</li> <li>Adoption: Stock becomes the standard for gRPC testing in TofuSoup</li> </ol>"},{"location":"architecture/07-stock-service-design/#future-extensions","title":"Future Extensions","text":"<ol> <li>Additional Patterns:</li> <li>Request deadlines/timeouts</li> <li>Metadata/header propagation</li> <li>Compression testing</li> <li> <p>Load balancing scenarios</p> </li> <li> <p>Observability:</p> </li> <li>OpenTelemetry integration</li> <li>Prometheus metrics</li> <li> <p>Distributed tracing</p> </li> <li> <p>Chaos Testing:</p> </li> <li>Network delays</li> <li>Partial failures</li> <li>Message corruption</li> </ol>"},{"location":"architecture/07-stock-service-design/#conclusion","title":"Conclusion","text":"<p>The Stock service provides a clean, focused way to test gRPC compatibility across languages without the complexity of plugin protocols. By integrating kvproto's work and extending it with additional RPC patterns, TofuSoup gains comprehensive cross-language testing capabilities that complement its existing plugin-focused tests.</p>"},{"location":"architecture/soup-go-vs-terraform/","title":"soup-go vs Terraform: Implementation Differences","text":""},{"location":"architecture/soup-go-vs-terraform/#overview","title":"Overview","text":"<p>soup-go does NOT implement CTY/HCL exactly as Terraform does. It's a testing harness that exposes the underlying libraries for cross-language compatibility testing, not a Terraform clone.</p>"},{"location":"architecture/soup-go-vs-terraform/#key-differences","title":"Key Differences","text":""},{"location":"architecture/soup-go-vs-terraform/#1-error-handling","title":"1. \u274c Error Handling","text":"Aspect Terraform soup-go HCL parse errors Exit code 2 Exit code 0 + JSON error Error output Formatted text to stderr JSON to stdout Error display Human-readable with line numbers Machine-readable JSON <p>Example: <pre><code># Terraform with bad HCL\n$ terraform fmt bad.tf\nError: Invalid multi-line string\n  on bad.tf line 2...\n$ echo $?\n2\n\n# soup-go with bad HCL\n$ soup-go hcl parse bad.hcl\n{\"success\": false, \"errors\": [...]}\n$ echo $?\n0\n</code></pre></p>"},{"location":"architecture/soup-go-vs-terraform/#2-output-format","title":"2. \u274c Output Format","text":"Aspect Terraform soup-go Success output Direct output Wrapped in JSON Format Various (HCL, JSON, text) Always JSON with metadata Structure Command-specific Consistent <code>{success, body}</code>"},{"location":"architecture/soup-go-vs-terraform/#3-cli-structure","title":"3. \u274c CLI Structure","text":"Aspect Terraform soup-go Commands Domain-specific (plan, apply) Library-exposing (cty, hcl) Purpose Infrastructure management Testing &amp; validation CTY access Internal only Direct CLI commands HCL access Via validate/fmt Direct parse command"},{"location":"architecture/soup-go-vs-terraform/#4-cty-unknown-value-handling-matches","title":"4. \u2705 CTY Unknown Value Handling (Matches!)","text":"<p>This is where soup-go DOES match Terraform exactly:</p> <ul> <li>Cannot marshal unknown values to JSON \u2705</li> <li>Unknown values only work in MessagePack \u2705</li> <li>Returns \"value is not known\" error \u2705</li> </ul> <pre><code>// Both Terraform and soup-go will fail here:\nunknownVal := cty.UnknownVal(cty.String)\n_, err := ctyjson.Marshal(unknownVal, cty.String)\n// err: \"value is not known\"\n</code></pre>"},{"location":"architecture/soup-go-vs-terraform/#5-library-usage-intent","title":"5. \u274c Library Usage Intent","text":"Aspect Terraform soup-go go-cty usage Internal state/plan management Direct value manipulation HCL usage Configuration parsing Generic HCL parsing Wire protocol Internal plugin communication Exposed for testing MessagePack Internal serialization Exposed for cross-language tests"},{"location":"architecture/soup-go-vs-terraform/#why-these-differences-exist","title":"Why These Differences Exist","text":""},{"location":"architecture/soup-go-vs-terraform/#soup-gos-purpose","title":"soup-go's Purpose","text":"<ul> <li>Testing harness for cross-language compatibility</li> <li>Direct library access for validation</li> <li>Machine-readable output for test automation</li> <li>Consistent JSON interface for programmatic use</li> </ul>"},{"location":"architecture/soup-go-vs-terraform/#terraforms-purpose","title":"Terraform's Purpose","text":"<ul> <li>Infrastructure management tool</li> <li>Human-friendly CLI interface</li> <li>Domain-specific operations</li> <li>Libraries are implementation details, not exposed</li> </ul>"},{"location":"architecture/soup-go-vs-terraform/#what-this-means","title":"What This Means","text":"<ol> <li>soup-go is NOT a drop-in replacement for Terraform commands</li> <li>soup-go exposes lower-level operations that Terraform hides</li> <li>The only \"exact\" match is the core library behavior (like CTY unknown handling)</li> <li>CLI behavior, error codes, and output formats are intentionally different</li> </ol>"},{"location":"architecture/soup-go-vs-terraform/#recommendations","title":"Recommendations","text":"<p>If exact Terraform behavior is needed:</p> <ol> <li>For error codes: soup-go should be updated to return non-zero exit codes on errors</li> <li>For output format: Remove the JSON wrapper or add a <code>--raw</code> flag</li> <li>For CLI structure: This is fundamental to soup-go's purpose and should remain different</li> </ol>"},{"location":"architecture/soup-go-vs-terraform/#conclusion","title":"Conclusion","text":"<p>soup-go uses the same underlying HashiCorp libraries (go-cty, hcl/v2) as Terraform, ensuring library-level compatibility, but wraps them in a different CLI interface designed for testing rather than infrastructure management.</p>"},{"location":"core-concepts/architecture/","title":"Architecture Overview","text":"<p>The <code>TofuSoup</code> project is a modular, CLI-driven framework designed for cross-language conformance testing and development tooling within the OpenTofu ecosystem.</p> <p>The architecture is segmented into several key domains:</p> <ol> <li> <p>Main CLI (<code>cli.py</code>): The central entry point, built with <code>click</code>. It uses a <code>LazyGroup</code> to ensure fast startup times by only loading the code for a specific subcommand when it is invoked.</p> </li> <li> <p>Core Utilities (<code>common/</code>): Provides shared services for all other components, including:</p> <ul> <li>Configuration (<code>config.py</code>): Loads and parses the <code>soup.toml</code> file.</li> <li>Exceptions (<code>exceptions.py</code>): Defines custom, project-specific exceptions.</li> <li>Rich Output (<code>rich_utils.py</code>): Helpers for creating enhanced terminal output with the <code>rich</code> library.</li> </ul> </li> <li> <p>Protocol/Component Tooling: Each core technology (<code>cty</code>, <code>hcl</code>, <code>rpc</code>, <code>wire</code>) has a dedicated module containing its CLI implementation and business logic. This modular design makes the system easy to extend.</p> </li> <li> <p>Harness Management (<code>harness/</code>): This component is responsible for the lifecycle of external test harnesses, which are primarily Go binaries. It abstracts the details of building, locating, and cleaning these executables, with behavior configurable via <code>soup.toml</code>.</p> </li> <li> <p>Conformance Testing (<code>testing/</code>, <code>conformance/</code>): This is the core of the suite. The <code>testing/</code> module provides the <code>soup test</code> CLI and logic for invoking <code>pytest</code>. The actual test suites reside in <code>conformance/</code>.</p> </li> <li> <p>Documentation (<code>docs/</code>, <code>.garnish</code> system): A co-located documentation framework that treats documentation as a first-class citizen of the development process, tightly coupling it with the source code to prevent drift.</p> </li> </ol>"},{"location":"core-concepts/conformance-testing/","title":"Conformance Testing Strategy","text":"<p>This document outlines the architecture for the TofuSoup conformance testing suite.</p>"},{"location":"core-concepts/conformance-testing/#testing-philosophy-souptest-vs-pytest","title":"Testing Philosophy: <code>souptest</code> vs. <code>pytest</code>","text":"<p>A core distinction in this project is the separation of concerns in testing: -   Conformance Tests (<code>souptest_*.py</code>): These tests, located in <code>tofusoup/conformance/</code>, are for verifying cross-language compatibility. They compare the behavior of Python implementations against the canonical Go harnesses. They are run via the <code>soup test</code> command. -   Internal Tests (<code>test_*.py</code>): These are standard unit and integration tests for the <code>tofusoup</code> tool itself. They are located in <code>tofusoup/tests/</code> and are run using <code>pytest</code> directly.</p>"},{"location":"core-concepts/conformance-testing/#architectural-design","title":"Architectural Design","text":"<p>The conformance suite is organized into a hierarchical and purpose-driven structure to ensure clarity, prevent duplication, and provide a scalable foundation for comprehensive testing.</p>"},{"location":"core-concepts/conformance-testing/#design-principles","title":"Design Principles","text":"<ol> <li>Hierarchical Organization: Reflect test complexity and dependencies.</li> <li>Cross-Cutting Separation: Create dedicated areas for security, performance, and integration.</li> <li>Single Source of Truth: Eliminate duplication in test scenarios and fixtures.</li> <li>Clear Purpose: Each directory has an explicit, non-overlapping responsibility.</li> </ol>"},{"location":"core-concepts/conformance-testing/#directory-structure","title":"Directory Structure","text":"<pre><code>conformance/\n\u251c\u2500\u2500 README.md                           # Testing strategy and execution guide\n\u251c\u2500\u2500 conftest.py                         # Global fixtures and matrix configurations\n\u2502\n\u251c\u2500\u2500 unit/                               # Individual protocol conformance\n\u2502   \u251c\u2500\u2500 souptest_cty_conformance.py\n\u2502   \u251c\u2500\u2500 souptest_wire_conformance.py\n\u2502   \u2514\u2500\u2500 souptest_rpc_conformance.py\n\u2502\n\u251c\u2500\u2500 integration/                        # Cross-protocol integration testing\n\u2502   \u251c\u2500\u2500 souptest_full_stack_matrix.py      # Complete CTY\u2192Wire\u2192RPC flow\n\u2502   \u2514\u2500\u2500 souptest_provider_lifecycle.py     # Full Terraform provider scenarios\n\u2502\n\u251c\u2500\u2500 security/                           # Security-focused conformance\n\u2502   \u2514\u2500\u2500 souptest_crypto_matrix.py          # All cipher/curve combinations\n\u2502\n\u251c\u2500\u2500 scenarios/                          # End-to-end BDD-style scenario testing\n\u2502   \u251c\u2500\u2500 terraform_equivalence/\n\u2502   \u2502   \u251c\u2500\u2500 basic_operations.feature\n\u2502   \u2502   \u2514\u2500\u2500 step_definitions/\n\u2502   \u2514\u2500\u2500 souptest_scenario_runner.py\n\u2502\n\u2514\u2500\u2500 fixtures/                           # Shared test data and configuration\n    \u251c\u2500\u2500 cty_data/\n    \u2514\u2500\u2500 certificates/\n</code></pre> <p>This architecture provides a robust framework for implementing matrix-based testing and ensuring systematic validation of TofuSoup components against their canonical Go counterparts.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide covers installing TofuSoup and its dependencies.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.11 or higher</li> <li>Go: 1.21+ (for building test harnesses)</li> <li>uv: Package manager (recommended) or pip</li> </ul>"},{"location":"getting-started/installation/#install-via-pypi","title":"Install via PyPI","text":"<pre><code>pip install tofusoup\n</code></pre> <p>For all optional dependencies:</p> <pre><code>pip install tofusoup[all]\n</code></pre>"},{"location":"getting-started/installation/#install-for-development","title":"Install for Development","text":"<p>Clone the repository and set up the development environment:</p> <pre><code># Clone repository\ngit clone https://github.com/provide-io/tofusoup.git\ncd tofusoup\n\n# Set up development environment with uv\nuv sync\n\n# Verify installation\nsoup --version\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>TofuSoup has several optional dependency groups:</p>"},{"location":"getting-started/installation/#cty-support","title":"CTY Support","text":"<p><pre><code>pip install tofusoup[cty]\n</code></pre> Includes: <code>pyvider-cty</code> for Python CTY operations</p>"},{"location":"getting-started/installation/#hcl-support","title":"HCL Support","text":"<p><pre><code>pip install tofusoup[hcl]\n</code></pre> Includes: <code>pyvider-hcl</code> for HCL parsing</p>"},{"location":"getting-started/installation/#rpc-support","title":"RPC Support","text":"<p><pre><code>pip install tofusoup[rpc]\n</code></pre> Includes: <code>pyvider-rpcplugin</code> for RPC plugin infrastructure</p>"},{"location":"getting-started/installation/#all-features","title":"All Features","text":"<p><pre><code>pip install tofusoup[all]\n</code></pre> Includes all optional dependencies</p>"},{"location":"getting-started/installation/#build-test-harnesses","title":"Build Test Harnesses","text":"<p>TofuSoup uses Go test harnesses for cross-language compatibility testing:</p> <pre><code># List available harnesses\nsoup harness list\n\n# Build all harnesses\nsoup harness build --all\n\n# Build specific harness\nsoup harness build soup-go\n</code></pre> <p>Note: Requires Go 1.21+ to be installed and available in your PATH.</p>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test that everything is working:</p> <pre><code># Check CLI\nsoup --version\n\n# List available commands\nsoup --help\n\n# Run a simple test\nsoup test cty\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>TofuSoup can be configured via <code>soup.toml</code> in your project directory:</p> <pre><code>[global_settings]\ndefault_python_log_level = \"INFO\"\n\n[harness_defaults.go]\nbuild_flags = [\"-v\"]\ntimeout_seconds = 300\n</code></pre> <p>See Configuration Reference for details.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found-soup","title":"Command not found: soup","text":"<p>Ensure the package is installed and your PATH includes Python's bin directory:</p> <pre><code># Check installation\npip list | grep tofusoup\n\n# Find soup executable\nwhich soup\n\n# Add to PATH if needed (example for macOS/Linux)\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"getting-started/installation/#go-harness-build-failures","title":"Go harness build failures","text":"<p>Ensure Go is installed and configured:</p> <pre><code># Check Go installation\ngo version\n\n# Check GOPATH\ngo env GOPATH\n</code></pre>"},{"location":"getting-started/installation/#module-import-errors","title":"Module import errors","text":"<p>Run <code>uv sync</code> to ensure all dependencies are installed:</p> <pre><code>cd /path/to/tofusoup\nuv sync\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start: Run your first commands</li> <li>What is TofuSoup?: Learn about TofuSoup's capabilities</li> <li>Configuration: Configure TofuSoup for your project</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with TofuSoup in minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>TofuSoup installed (see Installation)</li> <li>Python 3.11+</li> <li>Go 1.21+ (for harness operations)</li> </ul>"},{"location":"getting-started/quick-start/#your-first-tofusoup-commands","title":"Your First TofuSoup Commands","text":""},{"location":"getting-started/quick-start/#1-check-installation","title":"1. Check Installation","text":"<pre><code>soup --version\n</code></pre> <p>Expected output: <pre><code>soup, version 0.0.11\n</code></pre></p>"},{"location":"getting-started/quick-start/#2-explore-available-commands","title":"2. Explore Available Commands","text":"<pre><code>soup --help\n</code></pre> <p>You'll see commands organized by functionality: - <code>cty</code> - CTY operations - <code>hcl</code> - HCL operations - <code>wire</code> - Wire protocol operations - <code>rpc</code> - RPC testing - <code>test</code> - Conformance tests - <code>stir</code> - Matrix testing - <code>registry</code> - Registry operations - <code>harness</code> - Test harness management</p>"},{"location":"getting-started/quick-start/#3-work-with-cty-values","title":"3. Work with CTY Values","text":"<p>Create a simple JSON file:</p> <pre><code>echo '{\"value\": \"hello\", \"type\": \"string\"}' &gt; test.json\n</code></pre> <p>View it as a CTY structure:</p> <pre><code>soup cty view test.json\n</code></pre>"},{"location":"getting-started/quick-start/#4-test-wire-protocol-encoding","title":"4. Test Wire Protocol Encoding","text":"<p>Encode a value to Terraform's wire format:</p> <pre><code>soup wire encode test.json test.tfw.b64\n</code></pre> <p>Decode it back:</p> <pre><code>soup wire decode test.tfw.b64 decoded.json\ncat decoded.json\n</code></pre>"},{"location":"getting-started/quick-start/#5-run-conformance-tests","title":"5. Run Conformance Tests","text":"<p>Run CTY conformance tests:</p> <pre><code>soup test cty\n</code></pre> <p>This validates that Python and Go implementations produce identical results.</p>"},{"location":"getting-started/quick-start/#6-build-a-test-harness","title":"6. Build a Test Harness","text":"<p>List available harnesses:</p> <pre><code>soup harness list\n</code></pre> <p>Build the Go harness:</p> <pre><code>soup harness build soup-go\n</code></pre>"},{"location":"getting-started/quick-start/#7-matrix-testing-with-stir","title":"7. Matrix Testing with Stir","text":"<p>If you have Terraform test cases:</p> <pre><code># Create a test directory\nmkdir -p my_tests/basic\ncd my_tests/basic\n\n# Create main.tf\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = \"&gt;= 1.0\"\n}\n\noutput \"test\" {\n  value = \"hello world\"\n}\nEOF\n\n# Run tests\ncd ..\nsoup stir basic/\n</code></pre>"},{"location":"getting-started/quick-start/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/quick-start/#testing-a-provider-across-versions","title":"Testing a Provider Across Versions","text":"<pre><code># Configure matrix in soup.toml\ncat &gt; soup.toml &lt;&lt;EOF\n[workenv.matrix.versions]\nterraform = [\"1.5.7\", \"1.6.0\"]\ntofu = [\"1.8.0\", \"1.9.0\"]\nEOF\n\n# Run matrix tests\nsoup stir my_provider_tests/ --matrix\n</code></pre>"},{"location":"getting-started/quick-start/#validating-cty-compatibility","title":"Validating CTY Compatibility","text":"<pre><code># Test Python implementation against Go reference\nsoup test cty -v\n\n# Check wire protocol compatibility\nsoup test wire -v\n</code></pre>"},{"location":"getting-started/quick-start/#working-with-hcl","title":"Working with HCL","text":"<pre><code># View HCL structure\nsoup hcl view main.tf\n\n# Convert HCL to JSON\nsoup hcl convert main.tf main.json\n</code></pre>"},{"location":"getting-started/quick-start/#registry-operations","title":"Registry Operations","text":"<pre><code># Search for a provider\nsoup registry search provider aws\n\n# Get provider details\nsoup registry info hashicorp/aws\n\n# Launch interactive browser\nsoup sui\n</code></pre>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":"<p>Create <code>soup.toml</code> in your project:</p> <pre><code>[global_settings]\ndefault_python_log_level = \"INFO\"\n\n[harness_defaults.go]\nbuild_flags = [\"-v\"]\n\n[workenv.matrix.versions]\nterraform = [\"1.6.0\"]\ntofu = [\"1.8.0\"]\n</code></pre> <p>See Configuration Reference for all options.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#learn-core-concepts","title":"Learn Core Concepts","text":"<ul> <li>Architecture</li> <li>Conformance Testing</li> </ul>"},{"location":"getting-started/quick-start/#follow-detailed-guides","title":"Follow Detailed Guides","text":"<ul> <li>Using CTY and HCL Tools</li> <li>Wire Protocol Operations</li> <li>Running Conformance Tests</li> <li>Matrix Testing</li> </ul>"},{"location":"getting-started/quick-start/#reference-documentation","title":"Reference Documentation","text":"<ul> <li>API Reference</li> <li>Configuration</li> <li>Compatibility Matrix</li> </ul>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>CLI Help: <code>soup &lt;command&gt; --help</code></li> <li>FAQ: Frequently asked questions</li> <li>Troubleshooting: Common issues and solutions</li> <li>GitHub Issues: Report bugs or request features</li> </ul>"},{"location":"getting-started/what-is-tofusoup/","title":"What is TofuSoup?","text":"<p>TofuSoup is a comprehensive cross-language conformance testing suite and tooling framework for the OpenTofu/Terraform ecosystem. It ensures compatibility and correctness across different language implementations of Terraform-compatible tools.</p>"},{"location":"getting-started/what-is-tofusoup/#purpose","title":"Purpose","text":"<p>TofuSoup addresses a critical need in the Terraform ecosystem: ensuring that different language implementations (Python, Go, Rust, etc.) correctly implement Terraform's specifications. As the OpenTofu/Terraform ecosystem grows, maintaining compatibility across implementations becomes increasingly important.</p>"},{"location":"getting-started/what-is-tofusoup/#key-features","title":"Key Features","text":""},{"location":"getting-started/what-is-tofusoup/#conformance-testing","title":"\ud83e\uddea Conformance Testing","text":"<ul> <li>Cross-language compatibility tests</li> <li>Protocol compliance validation</li> <li>Binary-level equivalence testing</li> <li>Automated test generation and execution</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#developer-tools","title":"\ud83d\udee0\ufe0f Developer Tools","text":"<ul> <li>CTY Operations: Work with Terraform's Configuration Type System</li> <li>HCL Processing: Parse and convert HashiCorp Configuration Language</li> <li>Wire Protocol: Encode/decode Terraform wire protocol messages</li> <li>RPC Testing: gRPC service validation and plugin testing</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#matrix-testing","title":"\ud83d\udd04 Matrix Testing","text":"<ul> <li>Test providers across multiple Terraform/OpenTofu versions</li> <li>Parallel test execution</li> <li>Comprehensive compatibility matrices</li> <li>CI/CD integration</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#test-harnesses","title":"\ud83d\udcca Test Harnesses","text":"<ul> <li>Go reference implementations</li> <li>Python implementations via Pyvider</li> <li>CLI-based testing tools</li> <li>Automated harness management</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#why-tofusoup","title":"Why TofuSoup?","text":"<p>Cross-Language Compatibility: When building Terraform providers in languages other than Go (like Python via Pyvider), you need confidence that your implementation behaves identically to the official Go implementation.</p> <p>Conformance Testing: TofuSoup provides automated tests that verify: - CTY value encoding/decoding matches across languages - HCL parsing produces identical results - Wire protocol binary output is byte-for-byte identical - RPC communication works across language boundaries</p> <p>Development Velocity: Instead of manually testing compatibility, TofuSoup automates the process with comprehensive test suites that run in CI/CD.</p>"},{"location":"getting-started/what-is-tofusoup/#core-components","title":"Core Components","text":""},{"location":"getting-started/what-is-tofusoup/#1-cli-tools","title":"1. CLI Tools","text":"<p>Command-line utilities for working with Terraform technologies: <pre><code>soup cty view data.json        # Inspect CTY values\nsoup hcl convert main.tf       # Parse HCL files\nsoup wire encode value.json    # Wire protocol operations\nsoup rpc kv put mykey value    # RPC testing\n</code></pre></p>"},{"location":"getting-started/what-is-tofusoup/#2-test-framework","title":"2. Test Framework","text":"<p>Pytest-based conformance test suites: <pre><code>soup test all                  # Run all tests\nsoup test cty                  # Test CTY compatibility\nsoup test rpc                  # Test RPC compatibility\n</code></pre></p>"},{"location":"getting-started/what-is-tofusoup/#3-matrix-testing-stir","title":"3. Matrix Testing (Stir)","text":"<p>Multi-version testing framework: <pre><code>soup stir tests/ --matrix      # Test across TF/Tofu versions\n</code></pre></p>"},{"location":"getting-started/what-is-tofusoup/#4-test-harnesses","title":"4. Test Harnesses","text":"<p>Language-specific reference implementations: <pre><code>soup harness build --all       # Build Go harnesses\nsoup harness list              # List available harnesses\n</code></pre></p>"},{"location":"getting-started/what-is-tofusoup/#who-should-use-tofusoup","title":"Who Should Use TofuSoup?","text":"<ul> <li>Provider Developers: Building Terraform providers in Python, Rust, or other languages</li> <li>OpenTofu Contributors: Ensuring OpenTofu compatibility with Terraform</li> <li>Library Authors: Developing Terraform-adjacent libraries (CTY, HCL parsers, etc.)</li> <li>QA Engineers: Validating cross-platform provider behavior</li> <li>CI/CD Pipelines: Automated compatibility testing</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#architecture","title":"Architecture","text":"<p>TofuSoup follows a modular architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           CLI Commands (soup)            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    cty    \u2502    hcl    \u2502  wire  \u2502   rpc  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502         Conformance Test Suites         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Test Harnesses\u2502    Matrix Testing      \u2502\n\u2502  (Go/Python)   \u2502       (Stir)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/what-is-tofusoup/#next-steps","title":"Next Steps","text":"<ul> <li>Installation: Get TofuSoup installed and configured</li> <li>Quick Start: Run your first conformance test</li> <li>Core Concepts: Deep dive into the architecture</li> </ul>"},{"location":"getting-started/what-is-tofusoup/#related-projects","title":"Related Projects","text":"<p>TofuSoup is part of the Provide.io ecosystem:</p> <ul> <li>Pyvider: Python framework for building Terraform providers</li> <li>Pyvider-CTY: Python implementation of CTY</li> <li>Pyvider-HCL: Python HCL parser</li> <li>Pyvider-RPCPlugin: gRPC plugin infrastructure</li> </ul>"},{"location":"guides/migration/","title":"Migration Guide","text":"<p>This guide helps users migrate from older TofuSoup versions to the current unified harness architecture.</p>"},{"location":"guides/migration/#unified-harness-soup-go","title":"Unified Harness (<code>soup-go</code>)","text":""},{"location":"guides/migration/#what-changed","title":"What Changed","text":"<p>Previously, TofuSoup used separate Go harnesses for each component: - <code>go-cty</code> - CTY operations - <code>go-hcl</code> - HCL parsing - <code>go-rpc</code> - RPC server/client - <code>go-wire</code> - Wire protocol encoding/decoding</p> <p>Now: All functionality is unified in a single <code>soup-go</code> harness with subcommands.</p>"},{"location":"guides/migration/#command-migration","title":"Command Migration","text":"<p>Old harness commands: <pre><code># OLD - separate binaries\n./bin/go-cty validate-value ...\n./bin/go-hcl parse ...\n./bin/go-rpc server-start ...\n./bin/go-wire encode ...\n</code></pre></p> <p>New harness commands: <pre><code># NEW - unified soup-go with subcommands\n./harnesses/bin/soup-go cty validate-value ...\n./harnesses/bin/soup-go hcl parse ...\n./harnesses/bin/soup-go rpc server-start ...\n./harnesses/bin/soup-go wire encode ...\n</code></pre></p>"},{"location":"guides/migration/#harness-management","title":"Harness Management","text":"<p>Old commands: <pre><code># OLD\nsoup harness build go-cty\nsoup harness build go-hcl go-rpc go-wire\nsoup harness verify-cli go-cty\n</code></pre></p> <p>New commands: <pre><code># NEW\nsoup harness build soup-go\nsoup harness list\nsoup harness verify-cli soup-go\n</code></pre></p>"},{"location":"guides/migration/#binary-paths","title":"Binary Paths","text":"<p>Old paths: <pre><code>tofusoup/src/tofusoup/harness/go/bin/go-cty\ntofusoup/src/tofusoup/harness/go/bin/go-hcl\ntofusoup/src/tofusoup/harness/go/bin/go-rpc\ntofusoup/src/tofusoup/harness/go/bin/go-wire\n</code></pre></p> <p>New paths: <pre><code>harnesses/bin/soup-go\n</code></pre></p>"},{"location":"guides/migration/#configuration-file-updates","title":"Configuration File Updates","text":"<p>If you have <code>soup.toml</code> configurations referencing old harnesses:</p> <p>Before: <pre><code>[harness.go.cty]\nbuild_flags = [\"-v\"]\n\n[harness.go.rpc]\ntimeout_seconds = 60\n</code></pre></p> <p>After: <pre><code>[harness.go.soup-go]\nbuild_flags = [\"-v\"]\ntimeout_seconds = 60\n</code></pre></p>"},{"location":"guides/migration/#testing-scripts","title":"Testing &amp; Scripts","text":"<p>If you have test scripts or CI/CD pipelines using the old harnesses:</p> <p>Before: <pre><code># In test scripts\nGO_CTY_BIN=\"./bin/go-cty\"\n$GO_CTY_BIN validate-value ...\n\n# In Python tests\nharness_path = Path(\"bin/go-cty\")\n</code></pre></p> <p>After: <pre><code># In test scripts\nSOUP_GO_BIN=\"./harnesses/bin/soup-go\"\n$SOUP_GO_BIN cty validate-value ...\n\n# In Python tests\nharness_path = Path(\"harnesses/bin/soup-go\")\n# Use with subcommand: soup-go cty ...\n</code></pre></p>"},{"location":"guides/migration/#deprecated-command-removal","title":"Deprecated Command Removal","text":""},{"location":"guides/migration/#test-commands","title":"Test Commands","text":"<p>The following test commands have been removed in favor of the unified <code>soup test</code> command:</p> <p>Old (Deprecated): <pre><code>soup cty test compat\nsoup rpc test all\nsoup wire test compat\n</code></pre></p> <p>New (Current): <pre><code>soup test cty\nsoup test rpc\nsoup test wire\nsoup test all  # Run all suites\n</code></pre></p>"},{"location":"guides/migration/#why-this-change","title":"Why This Change?","text":"<p>The unified <code>soup test</code> command: - Provides consistent interface across all test suites - Supports better configuration via <code>soup.toml</code> - Enables easier CI/CD integration - Allows passing pytest arguments directly</p>"},{"location":"guides/migration/#migration-steps","title":"Migration Steps","text":"<ol> <li> <p>Update harness builds: <pre><code>soup harness build soup-go\n</code></pre></p> </li> <li> <p>Update scripts to use new harness paths</p> </li> <li> <p>Update test commands to use <code>soup test &lt;suite&gt;</code></p> </li> <li> <p>Update <code>soup.toml</code> if you have harness-specific configurations</p> </li> <li> <p>Verify everything works:    <pre><code>soup harness verify-cli soup-go\nsoup test all\n</code></pre></p> </li> </ol>"},{"location":"guides/migration/#troubleshooting-migration","title":"Troubleshooting Migration","text":""},{"location":"guides/migration/#harness-not-found","title":"Harness Not Found","text":"<p>Error: <code>harness 'go-cty' not found</code></p> <p>Solution: <pre><code># Remove old references, build new harness\nsoup harness clean --all\nsoup harness build soup-go\n</code></pre></p>"},{"location":"guides/migration/#path-issues","title":"Path Issues","text":"<p>Error: <code>No such file or directory: 'bin/go-cty'</code></p> <p>Solution: Update paths to <code>harnesses/bin/soup-go</code></p>"},{"location":"guides/migration/#configuration-errors","title":"Configuration Errors","text":"<p>Error: <code>Unknown harness 'go-rpc' in soup.toml</code></p> <p>Solution: Update configuration to use <code>soup-go</code> instead of individual harnesses</p>"},{"location":"guides/migration/#benefits-of-migration","title":"Benefits of Migration","text":"<ol> <li>Simpler Builds: One harness to build instead of four</li> <li>Consistent Interface: All functionality accessible via subcommands</li> <li>Smaller Footprint: Single binary vs multiple binaries</li> <li>Easier Maintenance: One codebase for all harness functionality</li> <li>Better Documentation: Unified documentation and help system</li> </ol>"},{"location":"guides/migration/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during migration:</p> <ol> <li>Check this migration guide</li> <li>Review Troubleshooting</li> <li>Check FAQ</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"guides/migration/#see-also","title":"See Also","text":"<ul> <li>Configuration Reference</li> <li>Test Harness Development</li> <li>Quick Start Guide</li> </ul>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/","title":"Guide: Using CTY and HCL Tools","text":"<p>TofuSoup provides powerful command-line utilities for inspecting, converting, and validating CTY and HCL data formats.</p>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#cty-utilities-soup-cty","title":"CTY Utilities (<code>soup cty</code>)","text":""},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#view-data-structure","title":"View Data Structure","text":"<p>To view the CTY structure of a JSON, Msgpack, or HCL data file, use <code>soup cty view</code>. The output is a rich, colorized tree that shows the inferred CTY type and value.</p> <pre><code>soup cty view data.json\nsoup cty view config.tfvars --format hcl\n</code></pre>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#convert-between-formats","title":"Convert Between Formats","text":"<p>To convert files between CTY-compatible JSON and Msgpack, use <code>soup cty convert</code>.</p> <pre><code># Convert JSON to MessagePack\nsoup cty convert input.json output.msgpack\n</code></pre>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#validate-a-value-against-a-type","title":"Validate a Value Against a Type","text":"<p>You can validate a CTY value (as a JSON string) against a CTY type string using the <code>soup-go</code> harness. This is useful for checking type compatibility.</p> <pre><code># Validate a simple string\nsoup cty validate-value '\"hello\"' --type-string string\n\n# Validate a list of numbers\nsoup cty validate-value '' --type-string \"list(number)\"\n\n# Validate an object\nsoup cty validate-value '{\"name\":\"tofu\",\"age\":1}' --type-string \"object({name=string,age=number})\"\n</code></pre>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#hcl-utilities-soup-hcl","title":"HCL Utilities (<code>soup hcl</code>)","text":""},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#view-hcl-as-cty","title":"View HCL as CTY","text":"<p>To parse an HCL file (like a <code>.tf</code> or <code>.tfvars</code> file) and display its structure as a CTY representation, use <code>soup hcl view</code>.</p> <pre><code>soup hcl view main.tf\n</code></pre>"},{"location":"guides/cli-usage/03-using-cty-and-hcl-tools/#convert-hcl-to-json-or-msgpack","title":"Convert HCL to JSON or Msgpack","text":"<p>To convert an HCL file to a more portable format, use <code>soup hcl convert</code>. This implicitly uses CTY as the intermediate representation.</p> <pre><code># Convert HCL to JSON\nsoup hcl convert network.tf network.json\n</code></pre>"},{"location":"guides/cli-usage/matrix-testing/","title":"Guide: Matrix Testing with <code>stir</code>","text":"<p>The <code>soup stir</code> command is a powerful tool for running parallel integration tests for a provider. It now includes built-in matrix testing capabilities to validate your provider's behavior against multiple versions of Terraform or OpenTofu.</p>"},{"location":"guides/cli-usage/matrix-testing/#built-in-matrix-testing-new","title":"Built-in Matrix Testing (New!)","text":"<p>As of the latest version, <code>soup stir</code> includes integrated matrix testing:</p> <pre><code># Run tests across all configured tool versions\nsoup stir tests/stir_cases --matrix\n\n# Save results to a file\nsoup stir tests/stir_cases --matrix --matrix-output results.json\n</code></pre> <p>This uses the matrix configuration from your <code>soup.toml</code> file (under <code>[workenv.matrix]</code>) or <code>wrkenv.toml</code> file.</p>"},{"location":"guides/cli-usage/matrix-testing/#manual-matrix-testing","title":"Manual Matrix Testing","text":"<p>You can also manually control matrix testing using wrkenv:</p>"},{"location":"guides/cli-usage/matrix-testing/#the-concept","title":"The Concept","text":"<p>The goal of matrix testing is to ensure your provider works correctly across the different IaC runtimes your users might have. The workflow is:</p> <ol> <li>Define Versions: Use the matrix configuration in <code>wrkenv.toml</code> to define the Terraform/Tofu versions you want to test against.</li> <li>Switch Runtime: Use <code>wrkenv</code> to switch the active <code>terraform</code> or <code>tofu</code> binary in the environment.</li> <li>Run Tests: Use <code>soup stir</code> to execute the full suite of integration tests using the currently active runtime.</li> <li>Repeat: Loop through all defined versions, switching the runtime and re-running the tests for each one.</li> </ol>"},{"location":"guides/cli-usage/matrix-testing/#example-configuration","title":"Example Configuration","text":"<p>You can configure matrix testing in your <code>soup.toml</code> file:</p> <pre><code># In soup.toml\n\n[workenv.matrix]\nparallel_jobs = 4\ntimeout_minutes = 30\n\n[workenv.matrix.versions]\n# Additional versions to test against\ntofu = [\"1.6.2\", \"1.7.0-alpha1\"]\nterraform = [\"1.5.7\", \"1.6.0\"]\n</code></pre> <p>Note: You can alternatively use <code>wrkenv.toml</code> for this configuration, but soup.toml takes precedence.</p>"},{"location":"guides/cli-usage/matrix-testing/#example-test-execution-script","title":"Example Test Execution Script","text":"<p>You can automate this workflow with a simple shell script.</p> <pre><code>#!/bin/bash\n# \ud83e\uddea Provider Matrix Test Runner\nset -eo pipefail\n\n# The directory containing all your 'stir' test cases\nSTIR_TEST_DIR=\"tests/stir_cases\"\n\n# Tools and versions to test, defined as \"tool_name:version1,version2,...\"\nTOOL_MATRIX=(\n  \"tofu:1.6.2,1.7.0\"\n  \"terraform:1.5.7,1.6.0\"\n)\n\necho \"\ud83c\udf72 Starting Provider Matrix Test...\"\n\nfor entry in \"${TOOL_MATRIX[@]}\"; do\n  TOOL_NAME=\"${entry%%:*}\"\n  VERSIONS=\"${entry#*:}\"\n\n  # Split versions by comma\n  IFS=',' read -ra VERSION_ARRAY &lt;&lt;&lt; \"$VERSIONS\"\n\n  for VERSION in \"${VERSION_ARRAY[@]}\"; do\n    echo \"\"\n    echo \"======================================================\"\n    echo \"\u27a1\ufe0f  Testing with ${TOOL_NAME} version ${VERSION}\"\n    echo \"======================================================\"\n\n    # Step 1: Install and switch to the target version using wrkenv\n    echo \"\ud83d\udd27 Setting up ${TOOL_NAME} ${VERSION}...\"\n    wrkenv \"${TOOL_NAME}\" \"${VERSION}\"\n\n    # Step 2: Run the stir test suite\n    echo \"\ud83d\ude80 Running 'stir' test suite...\"\n    soup stir \"${STIR_TEST_DIR}\"\n\n    echo \"\u2705 Completed tests for ${TOOL_NAME} ${VERSION}\"\n  done\ndone\n\necho \"\"\necho \"\ud83c\udf89 All matrix tests completed successfully!\"\n</code></pre> <p>This script iterates through your defined matrix, uses <code>soup workenv</code> to prepare the environment for each case, and then runs <code>soup stir</code> to validate the provider's behavior, ensuring broad compatibility.</p>"},{"location":"guides/cli-usage/wire-protocol/","title":"Working with Wire Protocol","text":"<p>This guide covers TofuSoup's wire protocol utilities for encoding and decoding Terraform's binary protocol format.</p>"},{"location":"guides/cli-usage/wire-protocol/#overview","title":"Overview","text":"<p>The Terraform wire protocol is the binary format used for communication between Terraform and providers. It uses MessagePack encoding with Base64 wrapping for transmission.</p> <p>TofuSoup provides tools to: - Encode JSON values to wire format - Decode wire format back to JSON - Validate cross-language compatibility - Debug protocol issues</p>"},{"location":"guides/cli-usage/wire-protocol/#wire-protocol-format","title":"Wire Protocol Format","text":"<p>The wire format consists of: 1. MessagePack encoding: Binary serialization of CTY values 2. Base64 encoding: ASCII-safe transport encoding 3. Type information: Preserved through encoding/decoding</p>"},{"location":"guides/cli-usage/wire-protocol/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/cli-usage/wire-protocol/#encoding-to-wire-format","title":"Encoding to Wire Format","text":"<p>Convert JSON to wire format:</p> <pre><code># Create a JSON value\necho '{\"value\": \"hello\", \"type\": \"string\"}' &gt; input.json\n\n# Encode to wire format\nsoup wire encode input.json output.tfw.b64\n\n# View the encoded output\ncat output.tfw.b64\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#decoding-from-wire-format","title":"Decoding from Wire Format","text":"<p>Convert wire format back to JSON:</p> <pre><code># Decode wire format\nsoup wire decode output.tfw.b64 decoded.json\n\n# Verify it matches the original\ndiff input.json decoded.json\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#working-with-complex-types","title":"Working with Complex Types","text":""},{"location":"guides/cli-usage/wire-protocol/#objects","title":"Objects","text":"<pre><code>cat &gt; object.json &lt;&lt;EOF\n{\n  \"value\": {\n    \"name\": \"example\",\n    \"count\": 42,\n    \"enabled\": true\n  },\n  \"type\": {\n    \"object\": {\n      \"name\": \"string\",\n      \"count\": \"number\",\n      \"enabled\": \"bool\"\n    }\n  }\n}\nEOF\n\nsoup wire encode object.json object.tfw.b64\nsoup wire decode object.tfw.b64 object_decoded.json\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#lists","title":"Lists","text":"<pre><code>cat &gt; list.json &lt;&lt;EOF\n{\n  \"value\": [\"one\", \"two\", \"three\"],\n  \"type\": {\"list\": \"string\"}\n}\nEOF\n\nsoup wire encode list.json list.tfw.b64\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#maps","title":"Maps","text":"<pre><code>cat &gt; map.json &lt;&lt;EOF\n{\n  \"value\": {\"key1\": \"value1\", \"key2\": \"value2\"},\n  \"type\": {\"map\": \"string\"}\n}\nEOF\n\nsoup wire encode map.json map.tfw.b64\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#dynamic-types","title":"Dynamic Types","text":"<pre><code>cat &gt; dynamic.json &lt;&lt;EOF\n{\n  \"value\": \"any value\",\n  \"type\": \"dynamic\"\n}\nEOF\n\nsoup wire encode dynamic.json dynamic.tfw.b64\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#cross-language-compatibility-testing","title":"Cross-Language Compatibility Testing","text":"<p>Verify that Python and Go implementations produce identical wire format:</p> <pre><code># Run wire protocol conformance tests\nsoup test wire\n\n# Run with verbose output\nsoup test wire -v\n</code></pre> <p>The tests validate: - \u2705 Encoding produces identical binary output - \u2705 Decoding recovers exact original values - \u2705 Type information is preserved - \u2705 Edge cases are handled correctly</p>"},{"location":"guides/cli-usage/wire-protocol/#debugging-protocol-issues","title":"Debugging Protocol Issues","text":""},{"location":"guides/cli-usage/wire-protocol/#view-wire-format-as-hex","title":"View Wire Format as Hex","text":"<pre><code># Encode to wire format\nsoup wire encode input.json output.tfw.b64\n\n# Decode Base64 and view as hex\nbase64 -d output.tfw.b64 | xxd\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#compare-python-vs-go-encoding","title":"Compare Python vs Go Encoding","text":"<pre><code># Using Python implementation\nsoup wire encode --implementation python input.json python.tfw.b64\n\n# Using Go harness\n./bin/soup-go wire encode input.json go.tfw.b64\n\n# Compare binary output\ndiff python.tfw.b64 go.tfw.b64\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#common-issues","title":"Common Issues","text":""},{"location":"guides/cli-usage/wire-protocol/#binary-mismatch-errors","title":"Binary Mismatch Errors","text":"<p>If you see \"Binary mismatch\" in conformance tests:</p> <ol> <li>Check input format is valid</li> <li>Verify type specifications are correct</li> <li>Review MessagePack encoding differences</li> <li>Check for float precision issues</li> </ol>"},{"location":"guides/cli-usage/wire-protocol/#type-preservation","title":"Type Preservation","text":"<p>Ensure type information is included:</p> <pre><code>{\n  \"value\": 42,\n  \"type\": \"number\"  // Required!\n}\n</code></pre> <p>Without type info, encoding may fail or produce incorrect results.</p>"},{"location":"guides/cli-usage/wire-protocol/#null-vs-unknown","title":"Null vs Unknown","text":"<p>CTY distinguishes between: - Null: Explicitly null value - Unknown: Value not yet known (during plan)</p> <pre><code>// Null value\n{\"value\": null, \"type\": \"string\"}\n\n// Unknown value\n{\"value\": null, \"type\": \"string\", \"unknown\": true}\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#integration-with-pyvider","title":"Integration with Pyvider","text":"<p>When building Terraform providers with Pyvider:</p> <pre><code>from pyvider.wire import encode_value, decode_value\nfrom pyvider.cty import Value, Type\n\n# Create a CTY value\nvalue = Value.from_json({\"name\": \"example\"})\ntype_spec = Type.object({\"name\": Type.string()})\n\n# Encode to wire format\nwire_bytes = encode_value(value, type_spec)\n\n# Decode from wire format\ndecoded_value = decode_value(wire_bytes, type_spec)\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/cli-usage/wire-protocol/#custom-messagepack-options","title":"Custom MessagePack Options","text":"<p>For debugging, you can work directly with MessagePack:</p> <pre><code>import msgpack\nfrom pathlib import Path\n\n# Read wire format\nwith open(\"output.tfw.b64\", \"r\") as f:\n    import base64\n    wire_bytes = base64.b64decode(f.read())\n\n# Unpack MessagePack\ndata = msgpack.unpackb(wire_bytes, raw=False)\nprint(data)\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#performance-testing","title":"Performance Testing","text":"<p>Benchmark encoding/decoding performance:</p> <pre><code># Time encoding operation\ntime for i in {1..1000}; do\n  soup wire encode input.json output.tfw.b64\ndone\n\n# Compare Python vs Go performance\npytest conformance/wire/test_performance.py\n</code></pre>"},{"location":"guides/cli-usage/wire-protocol/#reference","title":"Reference","text":"<ul> <li>Wire Protocol Details</li> <li>CTY and HCL Tools</li> <li>Conformance Testing</li> <li>Pyvider Wire Documentation</li> </ul>"},{"location":"guides/cli-usage/wire-protocol/#next-steps","title":"Next Steps","text":"<ul> <li>Run wire protocol conformance tests</li> <li>Integrate wire encoding in your provider</li> <li>Debug any binary mismatch issues</li> <li>Contribute test cases for edge cases</li> </ul>"},{"location":"guides/testing/01-running-conformance-tests/","title":"Guide: Running Conformance Tests","text":"<p>The <code>soup test</code> command is the unified entry point for running all Pytest-based conformance test suites. These tests (<code>souptest_*.py</code>) are specifically for verifying cross-language compatibility against the Go harnesses.</p>"},{"location":"guides/testing/01-running-conformance-tests/#running-all-suites","title":"Running All Suites","text":"<p>To execute every defined test suite, use the <code>all</code> subcommand. This is the most common command for a full regression check.</p> <pre><code>soup test all\n</code></pre>"},{"location":"guides/testing/01-running-conformance-tests/#running-a-specific-suite","title":"Running a Specific Suite","text":"<p>You can run a specific suite by name. This is useful for focusing on a particular area of compatibility during development.</p> <pre><code># Run only the CTY compatibility tests\nsoup test cty\n\n# Run only the RPC compatibility tests\nsoup test rpc\n</code></pre> <p>Available suites include <code>cty</code>, <code>rpc</code>, <code>wire</code>, <code>hcl</code>, and more.</p>"},{"location":"guides/testing/01-running-conformance-tests/#passing-arguments-to-pytest","title":"Passing Arguments to Pytest","text":"<p>Any arguments provided after the suite name are passed directly to <code>pytest</code>. This allows you to use any standard <code>pytest</code> flag, such as running tests by keyword (<code>-k</code>) or by marker (<code>-m</code>).</p> <pre><code># Run only tests with \"some_test_name\" in their name within the 'cty' suite\nsoup test cty -k \"some_test_name\"\n\n# Run all 'rpc' tests except those marked as 'slow'\nsoup test rpc -m \"not slow\"\n</code></pre>"},{"location":"guides/testing/01-running-conformance-tests/#configuration","title":"Configuration","text":"<p>Test behavior, such as environment variables, default <code>pytest</code> arguments, and tests to skip, can be configured globally or per-suite in your <code>soup.toml</code> file.</p> <p>Example <code>soup.toml</code>: ```toml [test_suite_defaults] extra_pytest_args = [\"-m\", \"not slow\"]</p> <p>[test_suite.rpc]</p>"},{"location":"guides/testing/01-running-conformance-tests/#set-an-environment-variable-only-for-the-rpc-test-suite","title":"Set an environment variable only for the RPC test suite","text":"<p>env_vars = { SKIP_RUBY_RPC_TESTS = \"1\" }```</p>"},{"location":"guides/testing/test-harness-development/","title":"Guide: Managing Language-Specific CLIs","text":"<p>The <code>soup harness</code> command is used to manage the lifecycle of language-specific implementations of the TofuSoup CLI, such as <code>soup-go</code>. These binaries provide feature parity with the main Python CLI and serve as the canonical reference for conformance tests.</p>"},{"location":"guides/testing/test-harness-development/#listing-clis","title":"Listing CLIs","text":"<p>To see a list of available language-specific CLIs and their current build status, use the <code>list</code> command.</p> <p><pre><code>soup harness list\n</code></pre> This will display a table showing each CLI, its expected binary path, and whether it is currently built.</p>"},{"location":"guides/testing/test-harness-development/#building-clis","title":"Building CLIs","text":"<p>The <code>build</code> command compiles the source code for the language-specific CLIs and places the executables in a standardized location (<code>tofusoup/src/tofusoup/harness/go/bin/</code>).</p> <pre><code># Build all available CLIs\nsoup harness build --all\n\n# Build a specific CLI, for example soup-go\nsoup harness build soup-go\n\n# Force a rebuild even if the binary already exists\nsoup harness build soup-go --force-rebuild\n</code></pre> <p>Build behavior, such as Go build flags and environment variables, can be customized in <code>soup.toml</code>.</p>"},{"location":"guides/testing/test-harness-development/#verifying-clis","title":"Verifying CLIs","text":"<p>After building, you can run a basic verification check to ensure the CLI is functional.</p> <pre><code>soup harness verify-cli soup-go\n</code></pre>"},{"location":"guides/testing/test-harness-development/#cleaning-clis","title":"Cleaning CLIs","text":"<p>The <code>clean</code> command removes the compiled binary artifacts for one or more CLIs.</p> <pre><code># Clean a specific CLI\nsoup harness clean soup-go\n\n# Clean all built CLIs\nsoup harness clean --all\n</code></pre>"},{"location":"reference/compatibility-matrix/","title":"RPC Cross-Language Compatibility Matrix","text":"<p>This document details the compatibility matrix for cross-language RPC connections in tofusoup, including client-server language pairs and cryptographic curve support.</p>"},{"location":"reference/compatibility-matrix/#language-pair-compatibility","title":"Language Pair Compatibility","text":"Client \u2192 Server Status Notes Python \u2192 Python \u2705 Supported Full support with all features Go \u2192 Python \u2705 Supported Recommended for cross-language scenarios Go \u2192 Go \u2705 Supported Full support with all features Python \u2192 Go \u274c Not Supported Known bug in pyvider-rpcplugin"},{"location":"reference/compatibility-matrix/#known-issues","title":"Known Issues","text":""},{"location":"reference/compatibility-matrix/#python-go-connection-failure","title":"Python \u2192 Go Connection Failure","text":"<p>Problem: Python clients cannot connect to Go servers due to a TLS handshake incompatibility in pyvider-rpcplugin.</p> <p>Symptoms: - Connection timeout after 10-30 seconds - TLS handshake failure errors - Server process starts but client cannot establish channel</p> <p>Workarounds: 1. Use Go client \u2192 Python server (recommended for cross-language scenarios) 2. Use Python client \u2192 Python server (pure Python) 3. Use Go client \u2192 Go server (pure Go)</p> <p>Related Issues: - pyvider-rpcplugin: Incompatibility with go-plugin server TLS handshake - Expected to be resolved in future pyvider releases</p>"},{"location":"reference/compatibility-matrix/#elliptic-curve-support","title":"Elliptic Curve Support","text":""},{"location":"reference/compatibility-matrix/#python-runtime-grpcio","title":"Python Runtime (grpcio)","text":"Curve Status Notes secp256r1 (P-256) \u2705 Supported Recommended, widely compatible secp384r1 (P-384) \u2705 Supported Higher security margin secp521r1 (P-521) \u274c Not Supported grpcio limitation"},{"location":"reference/compatibility-matrix/#go-runtime-cryptotls","title":"Go Runtime (crypto/tls)","text":"Curve Status Notes secp256r1 (P-256) \u2705 Supported Recommended, widely compatible secp384r1 (P-384) \u2705 Supported Higher security margin secp521r1 (P-521) \u2705 Supported Highest security, Go only"},{"location":"reference/compatibility-matrix/#curve-compatibility-notes","title":"Curve Compatibility Notes","text":"<ul> <li>Python servers: Only accept connections with <code>secp256r1</code> or <code>secp384r1</code></li> <li>Go servers: Accept connections with any standard NIST curve</li> <li>Cross-language: When connecting Go \u2192 Python, use <code>secp256r1</code> or <code>secp384r1</code></li> <li>Auto mode: Set <code>tls_curve=\"auto\"</code> to let the runtime choose (uses secp256r1)</li> </ul>"},{"location":"reference/compatibility-matrix/#tls-mode-compatibility","title":"TLS Mode Compatibility","text":""},{"location":"reference/compatibility-matrix/#supported-tls-modes","title":"Supported TLS Modes","text":"Mode Description Compatibility <code>disabled</code> No encryption Both Python and Go <code>auto</code> Automatic mTLS with generated certs Both Python and Go <code>manual</code> User-provided certificates Both Python and Go"},{"location":"reference/compatibility-matrix/#tls-mode-requirements","title":"TLS Mode Requirements","text":"<p>Auto Mode: - Server and client must both use <code>auto</code> mode - Specify <code>tls_key_type</code> (default: <code>\"ec\"</code>) - Specify <code>tls_curve</code> for EC keys (default: <code>\"secp256r1\"</code>) - Certificates generated automatically</p> <p>Manual Mode: - Provide <code>cert_file</code> and <code>key_file</code> parameters - Certificates must be compatible (matching key types and curves) - Both client and server need matching CA certificates</p>"},{"location":"reference/compatibility-matrix/#testing-compatibility","title":"Testing Compatibility","text":""},{"location":"reference/compatibility-matrix/#automated-test-coverage","title":"Automated Test Coverage","text":"<p>The test suite validates all supported combinations:</p> <pre><code># Run all compatibility tests\npytest tests/integration/\n\n# Run specific test suites\npytest tests/integration/test_cross_language_matrix.py    # Language pairs\npytest tests/integration/test_curve_support.py            # Curve validation\npytest tests/integration/test_error_scenarios.py          # Error handling\n</code></pre>"},{"location":"reference/compatibility-matrix/#test-matrix","title":"Test Matrix","text":"<p>The following combinations are tested automatically:</p> Test Scenario Client Server Curve Expected Result Python basic Python Python secp256r1 \u2705 Pass Python P-384 Python Python secp384r1 \u2705 Pass Go \u2192 Python Go Python auto \u2705 Pass Go \u2192 Go Go Go secp384r1 \u2705 Pass Python P-521 Python Python secp521r1 \u274c Expected Fail Python \u2192 Go Python Go any \u23ed\ufe0f Skipped (known bug)"},{"location":"reference/compatibility-matrix/#cli-validation","title":"CLI Validation","text":"<p>Use the validation command to check compatibility before connecting:</p> <pre><code># Check if a connection will work\nsoup rpc validate-connection --client python --server harnesses/bin/soup-go\n\n# Output:\n# \u26a0\ufe0f  Python \u2192 Go connections not supported\n# \u2713  Supported alternatives:\n#    - Go \u2192 Python (recommended)\n#    - Python \u2192 Python\n#    - Go \u2192 Go\n</code></pre>"},{"location":"reference/compatibility-matrix/#recommendations","title":"Recommendations","text":""},{"location":"reference/compatibility-matrix/#for-production-use","title":"For Production Use","text":"<ol> <li>Use Go \u2192 Python for cross-language scenarios (most reliable)</li> <li>Use secp256r1 or secp384r1 for Python servers</li> <li>Use auto TLS mode unless you have specific cert requirements</li> <li>Test your configuration with <code>soup rpc validate-connection</code> before deployment</li> </ol>"},{"location":"reference/compatibility-matrix/#for-development","title":"For Development","text":"<ol> <li>Use Python \u2192 Python for quick iteration on Python code</li> <li>Use Go \u2192 Go for quick iteration on Go code</li> <li>Avoid Python \u2192 Go until the bug is fixed</li> <li>Run integration tests to verify your setup: <code>pytest tests/integration/</code></li> </ol>"},{"location":"reference/compatibility-matrix/#error-messages","title":"Error Messages","text":"<p>When encountering compatibility issues, the client provides helpful error messages:</p>"},{"location":"reference/compatibility-matrix/#python-go-timeout","title":"Python \u2192 Go Timeout","text":"<pre><code>Connection timeout after 15.234s - Python client \u2192 Go server is not supported.\n\nThis is a known issue in pyvider-rpcplugin.\n\nSupported alternatives:\n  \u2713 Go client \u2192 Python server (use soup-go binary as client)\n  \u2713 Python client \u2192 Python server\n  \u2713 Go client \u2192 Go server\n\nServer path: harnesses/bin/soup-go\n</code></pre>"},{"location":"reference/compatibility-matrix/#unsupported-curve","title":"Unsupported Curve","text":"<pre><code>Curve 'secp521r1' is not supported by Python's grpcio library.\nSupported curves for Python: secp256r1, secp384r1\n\nOriginal error: TimeoutError: Connection timeout\n</code></pre>"},{"location":"reference/compatibility-matrix/#future-improvements","title":"Future Improvements","text":"<p>Planned enhancements to the compatibility matrix:</p> <ol> <li>Fix Python \u2192 Go connection (pyvider-rpcplugin update needed)</li> <li>Add Rust client/server support (future runtime)</li> <li>Add secp521r1 support for Python (requires grpcio update or alternative)</li> <li>Enhanced curve negotiation (automatic downgrade for compatibility)</li> </ol>"},{"location":"reference/compatibility-matrix/#related-documentation","title":"Related Documentation","text":"<ul> <li>RPC Matrix Specification</li> <li>Running Conformance Tests</li> <li>Cross-Language Compatibility</li> <li>pyvider-rpcplugin Documentation</li> </ul> <p>Last Updated: 2025-10-11</p>"},{"location":"reference/configuration/","title":"TofuSoup Configuration (<code>soup.toml</code>)","text":"<p>TofuSoup uses a TOML file named <code>soup.toml</code> for configuration. This file allows users to customize default behaviors for various commands, harness settings, and test execution parameters.</p>"},{"location":"reference/configuration/#location","title":"Location","text":"<p>TofuSoup searches for <code>soup.toml</code> in the following order: 1.  Path specified by the global <code>--config-file &lt;path&gt;</code> CLI option. 2.  <code>./soup.toml</code> (in the current working directory). 3.  <code>&lt;project_root&gt;/soup/soup.toml</code> (recommended default location).</p> <p>If no configuration file is found, TofuSoup operates with built-in defaults.</p>"},{"location":"reference/configuration/#precedence","title":"Precedence","text":"<p>For settings that can be defined in multiple places, the following order of precedence applies (highest to lowest): 1.  Command-line arguments. 2.  Environment variables (e.g., <code>TOFUSOUP_LOG_LEVEL</code>). 3.  Settings in <code>soup.toml</code>. 4.  Hardcoded application defaults.</p>"},{"location":"reference/configuration/#top-level-tables","title":"Top-Level Tables","text":""},{"location":"reference/configuration/#global_settings","title":"<code>[global_settings]</code>","text":"<p>Settings that apply across the TofuSoup application.</p> <ul> <li><code>default_python_log_level</code> (String): Sets the default logging level for TofuSoup's own Python-based logging. Valid values: \"TRACE\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\".</li> <li><code>default_harness_log_level</code> (String): A general default log level for external Go harnesses. Valid values for Go harnesses: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\".</li> </ul>"},{"location":"reference/configuration/#harness_defaultslanguage","title":"<code>[harness_defaults.&lt;language&gt;]</code>","text":"<p>Provides default settings for all harnesses of a specific language (e.g., <code>[harness_defaults.go]</code>).</p> <ul> <li><code>build_flags</code> (Array of Strings): Default flags passed to <code>go build</code>.</li> <li><code>common_env_vars</code> (Table): Environment variables to set for all Go harness operations.</li> <li><code>default_log_level</code> (String): Default log level specifically for Go harnesses.</li> <li><code>timeout_seconds</code> (Integer): Default timeout for running Go harness commands.</li> </ul>"},{"location":"reference/configuration/#harnesslanguagecomponent_id","title":"<code>[harness.&lt;language&gt;.\"&lt;component_id&gt;\"]</code>","text":"<p>Specific settings for an individual harness, overriding language defaults. Example: <code>[harness.go.cty]</code>.</p> <ul> <li><code>build_flags</code>, <code>custom_env_vars</code>, <code>log_level</code>, <code>timeout_seconds</code>.</li> </ul>"},{"location":"reference/configuration/#command_optionscommand_groupcommand_name","title":"<code>[command_options.\"&lt;command_group&gt;.&lt;command_name&gt;\"]</code>","text":"<p>Provides default values for specific CLI command options.</p> <p>Example: <pre><code>[command_options.\"hcl.convert\"]\ndefault_output_format = \"json\"\n</code></pre></p>"},{"location":"reference/configuration/#test_suite_defaults","title":"<code>[test_suite_defaults]</code>","text":"<p>Default settings applicable to all test suites run via <code>soup test</code>.</p> <ul> <li><code>env_vars</code> (Table): Environment variables to set for all test runs.</li> <li><code>extra_pytest_args</code> (Array of Strings): Additional arguments always passed to <code>pytest</code>.</li> <li><code>skip_tests</code> (Array of Strings): Test items to skip.</li> </ul>"},{"location":"reference/configuration/#test_suitesuite_name","title":"<code>[test_suite.&lt;suite_name&gt;]</code>","text":"<p>Specific settings for a named test suite (e.g., <code>[test_suite.rpc]</code>), overriding defaults.</p> <ul> <li><code>env_vars</code>, <code>extra_pytest_args</code>, <code>skip_tests</code>.</li> </ul>"},{"location":"reference/configuration/#workenv","title":"<code>[workenv]</code>","text":"<p>Configuration for tool management, powered by wrkenv. When configured in soup.toml, these settings are injected into wrkenv, making wrkenv.toml optional.</p> <ul> <li><code>terraform_flavor</code> (String): Default terraform flavor - \"terraform\" or \"opentofu\"</li> <li><code>tools</code> (Table): Tool versions to use (e.g., <code>terraform = \"1.5.7\"</code>)</li> <li><code>settings</code> (Table): Various settings like <code>verify_checksums</code> and <code>cache_downloads</code></li> </ul>"},{"location":"reference/configuration/#workenvmatrix","title":"<code>[workenv.matrix]</code>","text":"<p>Configuration for matrix testing with <code>soup stir --matrix</code>.</p> <ul> <li><code>versions</code> (Table): Additional versions to test for each tool</li> <li><code>parallel_jobs</code> (Integer): Number of parallel test jobs (default: 4)</li> <li><code>timeout_minutes</code> (Integer): Timeout for each test run (default: 30)</li> </ul> <p>Example: <pre><code>[workenv]\nterraform_flavor = \"opentofu\"\n\n[workenv.tools]\nterraform = \"1.8.5\"\ntofu = \"1.10.5\"\n\n[workenv.settings]\nverify_checksums = true\ncache_downloads = true\n\n[workenv.matrix]\nparallel_jobs = 8\ntimeout_minutes = 45\n\n[workenv.matrix.versions]\nterraform = [\"1.5.7\", \"1.6.0\", \"1.6.1\"]\ntofu = [\"1.6.2\", \"1.7.0\", \"1.8.0\"]\n</code></pre></p> <p>Note: You can alternatively configure wrkenv using a <code>wrkenv.toml</code> file. Settings in soup.toml take precedence over wrkenv.toml.</p>"},{"location":"reference/api/","title":"TofuSoup API Reference","text":"<p>This page provides auto-generated API documentation for the <code>tofusoup</code> Python package.</p>"},{"location":"reference/api/#using-tofusoup-as-a-library","title":"Using TofuSoup as a Library","text":"<p>While TofuSoup is primarily a CLI tool, you can also use its components programmatically:</p> <pre><code># CTY operations\nfrom tofusoup.cty.logic import convert_cty_file, view_cty_file\n\n# HCL operations\nfrom tofusoup.hcl.logic import parse_hcl_file, convert_hcl_file\n\n# Wire protocol operations\nfrom tofusoup.wire.logic import encode_wire, decode_wire\n\n# Configuration\nfrom tofusoup.common.config import load_tofusoup_config\n</code></pre>"},{"location":"reference/api/#module-documentation","title":"Module Documentation","text":""},{"location":"reference/api/#tofusoup","title":"tofusoup","text":""},{"location":"testing/conformance-test-status/","title":"Conformance Test Status","text":""},{"location":"testing/conformance-test-status/#overview","title":"Overview","text":"<p>This document tracks the status of conformance tests after migrating from separate harnesses (go-cty, go-hcl, go-wire) to the unified soup-go implementation.</p>"},{"location":"testing/conformance-test-status/#test-results-summary","title":"Test Results Summary","text":"<p>As of the latest run: - 31 passed \u2705 - 11 failed \u274c - 24 skipped \u23ed\ufe0f - 85 deselected</p>"},{"location":"testing/conformance-test-status/#known-issues","title":"Known Issues","text":""},{"location":"testing/conformance-test-status/#1-hcl-error-handling","title":"1. HCL Error Handling","text":"<p>Issue: soup-go returns exit code 0 even for parse errors, with errors in JSON output - Test expects: Exit code 1 for syntax errors - soup-go returns: Exit code 0 with <code>{\"success\": false, \"errors\": [...]}</code></p> <p>Affected tests: - <code>test_hcl_cli_parse[parse_syntax_error-soup-go]</code></p>"},{"location":"testing/conformance-test-status/#2-wire-protocol-format-differences","title":"2. Wire Protocol Format Differences","text":"<p>Issue: The old go-wire harness used base64 encoding, soup-go uses raw binary/msgpack - Tests expect: Base64-encoded wire format - soup-go provides: Raw msgpack bytes</p> <p>Affected tests: - <code>test_wire_cli_encode_simple_string</code> - <code>test_wire_cli_decode_simple_string</code></p>"},{"location":"testing/conformance-test-status/#3-command-structure-changes","title":"3. Command Structure Changes","text":"<p>All commands now require the subcommand prefix: - Old: <code>go-cty validate ...</code> - New: <code>soup-go cty validate-value ...</code></p> <ul> <li>Old: <code>go-hcl parse ...</code></li> <li> <p>New: <code>soup-go hcl parse ...</code></p> </li> <li> <p>Old: <code>go-wire encode ...</code></p> </li> <li>New: <code>soup-go wire encode ...</code></li> </ul>"},{"location":"testing/conformance-test-status/#migration-notes","title":"Migration Notes","text":""},{"location":"testing/conformance-test-status/#no-backward-compatibility","title":"No Backward Compatibility","text":"<p>Per user request, backward compatibility aliases have been removed. All tests must use soup-go directly with the appropriate subcommands.</p>"},{"location":"testing/conformance-test-status/#environment-variables","title":"Environment Variables","text":"<p>CTY test suite environment variables are properly configured via <code>conformance/cty/conftest.py</code> which loads settings from <code>soup.toml</code>: - <code>TOFUSOUP_TEST_DEFAULT_ENV</code> - <code>TOFUSOUP_CTY_SUITE_ENV</code></p>"},{"location":"testing/conformance-test-status/#recommendations","title":"Recommendations","text":"<ol> <li> <p>Exit Code Behavior: Consider whether soup-go should return non-zero exit codes for errors to match typical CLI behavior, or if tests should be updated to check JSON success field.</p> </li> <li> <p>Wire Format: Decide on standard encoding (raw bytes vs base64) for wire protocol operations.</p> </li> <li> <p>Test Updates: Continue updating remaining tests to match soup-go's actual behavior as the reference implementation.</p> </li> </ol>"},{"location":"testing/cross-language-compatibility/","title":"Cross-Language Compatibility Testing","text":"<p>This document describes how to run and verify cross-language compatibility between the Python <code>soup</code> CLI and the Go <code>soup-go</code> harness, ensuring that data structures (CTY values, HCL, wire protocol) can be correctly exchanged between implementations.</p>"},{"location":"testing/cross-language-compatibility/#prerequisites","title":"Prerequisites","text":""},{"location":"testing/cross-language-compatibility/#1-build-the-go-harness","title":"1. Build the Go Harness","text":"<p>The <code>soup-go</code> binary must be built before running tests:</p> <pre><code>cd src/tofusoup/harness/go/soup-go\ngo build -o $TOFUSOUP_ROOT/bin/soup-go .\n</code></pre> <p>The binary will be placed in <code>/Users/tim/code/gh/provide-io/tofusoup/bin/soup-go</code>.</p>"},{"location":"testing/cross-language-compatibility/#2-python-environment","title":"2. Python Environment","text":"<p>Ensure the Python environment is activated with all dependencies:</p> <pre><code>uv sync  # Sets up the workenv (not .venv)\n</code></pre>"},{"location":"testing/cross-language-compatibility/#running-cross-language-tests","title":"Running Cross-Language Tests","text":""},{"location":"testing/cross-language-compatibility/#cty-compatibility-tests","title":"CTY Compatibility Tests","text":"<p>The primary cross-language compatibility tests are in <code>conformance/cty/souptest_cty_interop.py</code>.</p>"},{"location":"testing/cross-language-compatibility/#run-all-cty-compatibility-tests","title":"Run all CTY compatibility tests:","text":"<pre><code>pytest conformance/cty/souptest_cty_interop.py -v\n</code></pre>"},{"location":"testing/cross-language-compatibility/#run-specific-test-cases","title":"Run specific test cases:","text":"<pre><code># Test a specific case (e.g., string handling)\npytest conformance/cty/souptest_cty_interop.py -k \"string_simple\" -v\n\n# Test unknown value handling (will be skipped for JSON input)\npytest conformance/cty/souptest_cty_interop.py -k \"unknown\" -v\n</code></pre>"},{"location":"testing/cross-language-compatibility/#test-architecture","title":"Test Architecture","text":""},{"location":"testing/cross-language-compatibility/#test-flow","title":"Test Flow","text":"<p>The cross-language tests verify bidirectional compatibility:</p> <ol> <li>Python \u2192 Go \u2192 Python: Python creates fixtures, Go processes them, Python validates</li> <li>Go \u2192 Python \u2192 Go: Go creates fixtures, Python processes them, Go validates</li> </ol>"},{"location":"testing/cross-language-compatibility/#test-cases","title":"Test Cases","text":"<p>The test suite covers: - Basic types: strings, numbers, booleans - Null values: Proper null handling across languages - Unknown values: MessagePack-only (JSON not supported by go-cty) - Collections: Lists, sets, maps - Complex types: Objects, tuples, nested structures - Dynamic types: Dynamic pseudo-type wrapping</p>"},{"location":"testing/cross-language-compatibility/#important-limitations","title":"Important Limitations","text":""},{"location":"testing/cross-language-compatibility/#unknown-values-and-json","title":"Unknown Values and JSON","text":"<p>go-cty (and Terraform) CANNOT handle unknown values in JSON format. This is a fundamental limitation:</p> <ul> <li>\u274c JSON \u2192 Unknown \u2192 Go: Will fail with \"value is not known\"</li> <li>\u2705 MessagePack \u2192 Unknown \u2192 Go: Works correctly</li> <li>\u2705 Go \u2192 Unknown \u2192 MessagePack: Works correctly</li> <li>\u274c Go \u2192 Unknown \u2192 JSON: Will fail with \"value is not known\"</li> </ul> <p>Tests involving unknown values through JSON are automatically skipped.</p>"},{"location":"testing/cross-language-compatibility/#manual-verification","title":"Manual Verification","text":""},{"location":"testing/cross-language-compatibility/#cty-operations","title":"CTY Operations","text":""},{"location":"testing/cross-language-compatibility/#test-basic-conversion","title":"Test basic conversion:","text":"<pre><code># JSON to MessagePack\necho '\"hello\"' | soup-go cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | xxd\n\n# MessagePack roundtrip\necho '\"test\"' | soup-go cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | \\\nsoup-go cty convert - - \\\n  --input-format msgpack \\\n  --output-format json \\\n  --type '\"string\"'\n</code></pre>"},{"location":"testing/cross-language-compatibility/#test-validation","title":"Test validation:","text":"<pre><code># Validate a value\nsoup-go cty validate-value '\"hello\"' --type '\"string\"'\n\n# Should output: \"Validation Succeeded\"\n</code></pre>"},{"location":"testing/cross-language-compatibility/#hcl-parsing","title":"HCL Parsing","text":""},{"location":"testing/cross-language-compatibility/#create-a-test-hcl-file","title":"Create a test HCL file:","text":"<pre><code>cat &gt; /tmp/test.hcl &lt;&lt; 'EOF'\nresource \"example\" \"test\" {\n  name = \"hello\"\n  count = 42\n}\nEOF\n</code></pre>"},{"location":"testing/cross-language-compatibility/#parse-with-soup-go","title":"Parse with soup-go:","text":"<pre><code>soup-go hcl parse /tmp/test.hcl | python3 -m json.tool\n</code></pre> <p>Expected output: <pre><code>{\n    \"body\": {\n        \"blocks\": [\n            {\n                \"body\": {\n                    \"count\": 42,\n                    \"name\": \"hello\"\n                },\n                \"labels\": [\"example\", \"test\"],\n                \"type\": \"resource\"\n            }\n        ]\n    },\n    \"success\": true\n}\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#validate-hcl-syntax","title":"Validate HCL syntax:","text":"<pre><code>soup-go hcl validate /tmp/test.hcl\n</code></pre>"},{"location":"testing/cross-language-compatibility/#wire-protocol","title":"Wire Protocol","text":""},{"location":"testing/cross-language-compatibility/#test-encodingdecoding","title":"Test encoding/decoding:","text":"<pre><code># JSON to MessagePack wire format\necho '{\"key\": \"value\"}' | soup-go wire encode - - \\\n  --input-format json \\\n  --output-format msgpack | xxd\n\n# With CTY type awareness\necho '\"hello\"' | soup-go wire encode - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | xxd\n</code></pre>"},{"location":"testing/cross-language-compatibility/#debugging-failed-tests","title":"Debugging Failed Tests","text":""},{"location":"testing/cross-language-compatibility/#1-check-binary-version","title":"1. Check Binary Version","text":"<p>Ensure soup-go is up to date: <pre><code>soup-go --version\n# Should show: 0.1.0 or later\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#2-verbose-logging","title":"2. Verbose Logging","text":"<p>Run soup-go with verbose logging: <pre><code>soup-go --log-level debug cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' &lt;&lt;&lt; '\"test\"'\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#3-check-messagepack-formats","title":"3. Check MessagePack Formats","text":"<p>Python and Go use slightly different MessagePack extension formats for unknown values: - Python: <code>c70000</code> (fixext2) - Go: <code>d40000</code> (fixext1)</p> <p>Both formats are interoperable and correctly handled by both implementations.</p>"},{"location":"testing/cross-language-compatibility/#4-common-issues","title":"4. Common Issues","text":""},{"location":"testing/cross-language-compatibility/#value-is-not-known-error","title":"\"value is not known\" Error","text":"<p>This occurs when trying to convert unknown values through JSON. This is expected behavior matching Terraform. Use MessagePack for unknown values.</p>"},{"location":"testing/cross-language-compatibility/#unknown-flag-error","title":"\"unknown flag\" Error","text":"<p>The soup-go binary is outdated. Rebuild it: <pre><code>cd src/tofusoup/harness/go/soup-go\ngo build -o $TOFUSOUP_ROOT/bin/soup-go .\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#continuous-integration","title":"Continuous Integration","text":"<p>For CI/CD pipelines, ensure:</p> <ol> <li>Go is installed (version 1.21+)</li> <li>Build soup-go before running tests:    <pre><code>make -C src/tofusoup/harness/go/soup-go build\n</code></pre></li> <li>Run the test suite:    <pre><code>pytest conformance/cty/souptest_cty_interop.py --tb=short\n</code></pre></li> </ol>"},{"location":"testing/cross-language-compatibility/#reference-implementation","title":"Reference Implementation","text":"<p>The Go implementation (<code>soup-go</code>) serves as the reference implementation that exactly matches Terraform's behavior. No workarounds or Python-specific accommodations should be made in the Go code. Instead, Python tests should adapt to Go/Terraform's limitations (e.g., skipping unknown value tests for JSON input).</p>"}]}