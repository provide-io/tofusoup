{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TofuSoup Documentation","text":"<p>Welcome to TofuSoup - Cross-language conformance testing framework for ensuring compatibility and consistency across polyglot systems.</p>"},{"location":"#features","title":"Features","text":"<p>TofuSoup provides:</p> <ul> <li>Cross-Language Testing: Test compatibility between Python, Go, TypeScript, and more</li> <li>Conformance Validation: Ensure implementations meet specifications</li> <li>Protocol Testing: Validate communication protocols and data formats</li> <li>Schema Validation: Cross-language schema and type validation</li> <li>Integration Testing: End-to-end testing across language boundaries</li> <li>Performance Benchmarking: Cross-language performance comparison</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install tofusoup\n// Installing tofusoup...\nSuccessfully installed tofusoup\n\n$ soup --version\ntofusoup, version 0.1.0\n</code></pre>"},{"location":"#generate-test-configuration","title":"Generate Test Configuration","text":"<pre><code>$ soup generate --type conformance --name user-api\n// Creating conformance test suite...\n\u2713 Generated conformance/user-api/\n\u2713 Created test specifications\n\u2713 Created fixtures\n\nTest configuration created successfully!\n</code></pre>"},{"location":"#run-conformance-tests","title":"Run Conformance Tests","text":"<pre><code>$ soup test --all\n// Running conformance test suite...\n// Loading test configurations...\nFound 12 test cases\n\nTesting Python implementation...\n---&gt; 100%\n\u2713 12/12 passed\n\nTesting Go implementation...\n---&gt; 100%\n\u2713 12/12 passed\n\nCross-language validation...\n---&gt; 100%\n\u2713 All implementations conform to specification\n\nAll tests passed! \u2728\n</code></pre>"},{"location":"#validate-specific-components","title":"Validate Specific Components","text":"<pre><code>$ soup validate --component user-api\n// Validating user-api component...\n\nSchema validation: \u2713 passed\nProtocol validation: \u2713 passed\nType compatibility: \u2713 passed\nPerformance benchmarks: \u2713 within limits\n\nComponent validation successful!\n</code></pre>"},{"location":"#generate-test-report","title":"Generate Test Report","text":"<pre><code>$ soup report --format html --output report.html\n// Generating test report...\n// Analyzing test results...\n// Creating visualizations...\n---&gt; 100%\n\n\u2713 Report generated: report.html\n  - 48 test cases\n  - 100% pass rate\n  - Cross-language compatibility: \u2713\n</code></pre>"},{"location":"#python-api-usage","title":"Python API Usage","text":"<pre><code>from tofusoup import ConformanceTest, Protocol\n\n# Define a cross-language test\ntest = ConformanceTest(\"user-api\")\ntest.add_implementation(\"python\", \"api.py\")\ntest.add_implementation(\"go\", \"api.go\")\n\n# Run conformance validation\nresults = test.validate()\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<p>For complete API documentation, see the API Reference.</p>"},{"location":"#testing-framework","title":"Testing Framework","text":"<ul> <li>Conformance: Cross-language conformance validation</li> <li>Protocol: Communication protocol testing</li> <li>Schema: Data schema and type validation</li> <li>Benchmarks: Performance testing and comparison</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial implementation of the <code>soup</code> CLI with lazy-loading commands.</li> <li>Core modules for <code>cty</code>, <code>hcl</code>, <code>wire</code>, <code>rpc</code>, <code>harness</code>, and <code>testing</code>.</li> <li>Go harnesses for CTY, HCL, Wire, and RPC (K/V store).</li> <li>Pytest-based conformance testing framework.</li> <li><code>.garnish</code> documentation system with <code>scaffold</code> and <code>render</code> commands.</li> <li><code>workenv</code> tool management system for managing TF, Tofu, Go, etc.</li> <li><code>stir</code> command for parallel Terraform integration testing.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Refactored <code>pyvider-cty</code> dependencies and stabilized APIs.</li> <li>Consolidated test suites under the <code>soup test</code> command.</li> <li>Standardized on <code>soup.toml</code> for all configuration.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Addressed binary mismatches between Python and Go encoders for CTY and Wire protocols.</li> </ul>"},{"location":"CHANGELOG/#known-issues","title":"Known Issues","text":"<ul> <li>The <code>pyvider-builder</code> project requires a significant refactoring to consolidate Go and Python logic.</li> <li>The conformance test suite structure needs to be reorganized according to the architectural plan to better separate unit, integration, and other test types.</li> </ul>"},{"location":"CONFIGURATION/","title":"TofuSoup Configuration (<code>soup.toml</code>)","text":"<p>TofuSoup uses a TOML file named <code>soup.toml</code> for configuration. This file allows users to customize default behaviors for various commands, harness settings, and test execution parameters.</p>"},{"location":"CONFIGURATION/#location","title":"Location","text":"<p>TofuSoup searches for <code>soup.toml</code> in the following order: 1.  Path specified by the global <code>--config-file &lt;path&gt;</code> CLI option. 2.  <code>./soup.toml</code> (in the current working directory). 3.  <code>&lt;project_root&gt;/soup/soup.toml</code> (recommended default location).</p> <p>If no configuration file is found, TofuSoup operates with built-in defaults.</p>"},{"location":"CONFIGURATION/#precedence","title":"Precedence","text":"<p>For settings that can be defined in multiple places, the following order of precedence applies (highest to lowest): 1.  Command-line arguments. 2.  Environment variables (e.g., <code>TOFUSOUP_LOG_LEVEL</code>). 3.  Settings in <code>soup.toml</code>. 4.  Hardcoded application defaults.</p>"},{"location":"CONFIGURATION/#top-level-tables","title":"Top-Level Tables","text":""},{"location":"CONFIGURATION/#global_settings","title":"<code>[global_settings]</code>","text":"<p>Settings that apply across the TofuSoup application.</p> <ul> <li><code>default_python_log_level</code> (String): Sets the default logging level for TofuSoup's own Python-based logging. Valid values: \"TRACE\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\".</li> <li><code>default_harness_log_level</code> (String): A general default log level for external Go harnesses. Valid values for Go harnesses: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\".</li> </ul>"},{"location":"CONFIGURATION/#harness_defaultslanguage","title":"<code>[harness_defaults.&lt;language&gt;]</code>","text":"<p>Provides default settings for all harnesses of a specific language (e.g., <code>[harness_defaults.go]</code>).</p> <ul> <li><code>build_flags</code> (Array of Strings): Default flags passed to <code>go build</code>.</li> <li><code>common_env_vars</code> (Table): Environment variables to set for all Go harness operations.</li> <li><code>default_log_level</code> (String): Default log level specifically for Go harnesses.</li> <li><code>timeout_seconds</code> (Integer): Default timeout for running Go harness commands.</li> </ul>"},{"location":"CONFIGURATION/#harnesslanguagecomponent_id","title":"<code>[harness.&lt;language&gt;.\"&lt;component_id&gt;\"]</code>","text":"<p>Specific settings for an individual harness, overriding language defaults. Example: <code>[harness.go.cty]</code>.</p> <ul> <li><code>build_flags</code>, <code>custom_env_vars</code>, <code>log_level</code>, <code>timeout_seconds</code>.</li> </ul>"},{"location":"CONFIGURATION/#command_optionscommand_groupcommand_name","title":"<code>[command_options.\"&lt;command_group&gt;.&lt;command_name&gt;\"]</code>","text":"<p>Provides default values for specific CLI command options.</p> <p>Example: <pre><code>[command_options.\"hcl.convert\"]\ndefault_output_format = \"json\"\n</code></pre></p>"},{"location":"CONFIGURATION/#test_suite_defaults","title":"<code>[test_suite_defaults]</code>","text":"<p>Default settings applicable to all test suites run via <code>soup test</code>.</p> <ul> <li><code>env_vars</code> (Table): Environment variables to set for all test runs.</li> <li><code>extra_pytest_args</code> (Array of Strings): Additional arguments always passed to <code>pytest</code>.</li> <li><code>skip_tests</code> (Array of Strings): Test items to skip.</li> </ul>"},{"location":"CONFIGURATION/#test_suitesuite_name","title":"<code>[test_suite.&lt;suite_name&gt;]</code>","text":"<p>Specific settings for a named test suite (e.g., <code>[test_suite.rpc]</code>), overriding defaults.</p> <ul> <li><code>env_vars</code>, <code>extra_pytest_args</code>, <code>skip_tests</code>.</li> </ul>"},{"location":"CONFIGURATION/#workenv","title":"<code>[workenv]</code>","text":"<p>Configuration for tool management, powered by wrkenv. When configured in soup.toml, these settings are injected into wrkenv, making wrkenv.toml optional.</p> <ul> <li><code>terraform_flavor</code> (String): Default terraform flavor - \"terraform\" or \"opentofu\"</li> <li><code>tools</code> (Table): Tool versions to use (e.g., <code>terraform = \"1.5.7\"</code>)</li> <li><code>settings</code> (Table): Various settings like <code>verify_checksums</code> and <code>cache_downloads</code></li> </ul>"},{"location":"CONFIGURATION/#workenvmatrix","title":"<code>[workenv.matrix]</code>","text":"<p>Configuration for matrix testing with <code>soup stir --matrix</code>.</p> <ul> <li><code>versions</code> (Table): Additional versions to test for each tool</li> <li><code>parallel_jobs</code> (Integer): Number of parallel test jobs (default: 4)</li> <li><code>timeout_minutes</code> (Integer): Timeout for each test run (default: 30)</li> </ul> <p>Example: <pre><code>[workenv]\nterraform_flavor = \"opentofu\"\n\n[workenv.tools]\nterraform = \"1.8.5\"\ntofu = \"1.10.5\"\n\n[workenv.settings]\nverify_checksums = true\ncache_downloads = true\n\n[workenv.matrix]\nparallel_jobs = 8\ntimeout_minutes = 45\n\n[workenv.matrix.versions]\nterraform = [\"1.5.7\", \"1.6.0\", \"1.6.1\"]\ntofu = [\"1.6.2\", \"1.7.0\", \"1.8.0\"]\n</code></pre></p> <p>Note: You can alternatively configure wrkenv using a <code>wrkenv.toml</code> file. Settings in soup.toml take precedence over wrkenv.toml.</p>"},{"location":"STATUS/","title":"TofuSoup Project Status Update","text":"<p>Date: August 7, 2025</p>"},{"location":"STATUS/#1-project-goal","title":"1. Project Goal","text":"<p>The overarching goal of the <code>tofusoup</code> project is to provide a comprehensive, cross-language conformance testing suite and utility toolkit for ensuring compatibility and correctness across various implementations of OpenTofu-related technologies, including CTY, HCL, RPC mechanisms, and the Terraform Wire Protocol (tfwire). The <code>soup-go</code> executable is intended to be a polyglot harness, mirroring core functionalities of the Python <code>soup</code> CLI for CTY, HCL, RPC, and Wire, enabling cross-language interoperability testing.</p>"},{"location":"STATUS/#2-current-state-issues-encountered","title":"2. Current State &amp; Issues Encountered","text":"<p>Initial attempts to run <code>pytest</code> and <code>soup test all</code> within the <code>tofusoup</code> directory revealed several critical issues, primarily related to the Go harness (<code>soup-go</code>) build process and its CLI functionality.</p> <p>Key Issues Identified:</p> <ul> <li> <p>Go Harness Build Failures (<code>soup-go</code>):</p> <ul> <li><code>protoc-gen-go: program not found</code>: This error persistently occurred during the <code>go generate</code> step, indicating that the <code>protoc</code> plugins (<code>protoc-gen-go</code> and <code>protoc-gen-go-grpc</code>) were not found in the <code>PATH</code> environment variable when the <code>go generate</code> subprocess was invoked.</li> <li><code>package tofusoup/harness/go/soup-go/proto is not in std</code>: This error, appearing during <code>go build</code>, suggests that the Go compiler is failing to recognize the locally generated <code>proto</code> package as part of the <code>soup-go</code> module, instead looking for it in the standard library. This is a fundamental module resolution problem.</li> <li><code>go.mod</code> dependency conflicts: The <code>go.mod</code> file contained a <code>require</code> for <code>github.com/hashicorp/go-cty</code> which conflicted with the intended <code>github.com/zclconf/go-cty</code>.</li> </ul> </li> <li> <p><code>soup-go cty</code> Command Limitations:</p> <ul> <li><code>unknown flag: --input-format</code> / <code>--output-format</code>: The <code>soup-go cty convert</code> command, as implemented, did not recognize the <code>--input-format</code> and <code>--output-format</code> flags, indicating a mismatch between the Python test expectations and the Go implementation.</li> <li><code>invalid primitive type name \"list(string)\"</code>: The <code>soup-go cty validate-value</code> command failed to correctly parse and validate complex CTY type strings (e.g., <code>list(string)</code>), suggesting it only supported primitive types.</li> </ul> </li> <li> <p>Python CTY Serialization:</p> <ul> <li><code>AttributeError: 'CtyValue' object has no attribute 'to_legacy_dict'</code>: The Python tests were attempting to use a deprecated method for CTY value serialization.</li> <li><code>TypeError: cty_to_msgpack() missing 1 required positional argument: 'schema'</code>: The <code>cty_to_msgpack</code> function was being called without its required <code>schema</code> argument.</li> <li><code>TypeError: Object of type bytes is not JSON serializable</code>: When attempting to serialize <code>CtyValue</code> objects (specifically <code>UnknownValue</code> and <code>CtyDynamic</code>) to JSON, the internal <code>bytes</code> representation caused JSON serialization errors.</li> </ul> </li> </ul>"},{"location":"STATUS/#3-actions-taken","title":"3. Actions Taken","text":"<p>The following actions have been taken to address the identified issues:</p> <ul> <li> <p>Python Test Fixes (<code>conformance/cty/souptest_cty_interop.py</code>):</p> <ul> <li>Updated <code>cty_to_msgpack</code> calls with <code>schema</code> argument.</li> <li>Updated <code>validate-value</code> type string to use <code>json.dumps(encode_cty_type_to_wire_json(cty_value.type))</code>.</li> <li>Reverted to <code>cty_to_native</code> for JSON serialization, acknowledging its limitations with <code>bytes</code> output.</li> <li>Introduced <code>_cty_value_to_json_compatible_value</code> helper function to handle JSON serialization of <code>CtyValue</code> objects, including <code>UnknownValue</code> and <code>CtyDynamic</code> types.</li> </ul> </li> <li> <p>Go Harness Build Environment Fixes (<code>tofusoup/src/tofusoup/harness/go/build.py</code> &amp; <code>tofusoup/env.sh</code>):</p> <ul> <li>Ensured <code>$(go env GOPATH)/bin</code> is added to the <code>PATH</code> environment variable for subprocesses in <code>build.py</code> to help <code>protoc</code> find its plugins.</li> <li>Set <code>force_rebuild=True</code> in the <code>go_harness_executable</code> pytest fixture to ensure <code>soup-go</code> is always rebuilt with the latest changes.</li> </ul> </li> <li> <p>Go Harness <code>cty</code> Command Implementation (<code>tofusoup/src/tofusoup/harness/go/soup-go/cmd/cty.go</code>):</p> <ul> <li>Implemented the <code>cty convert</code> Cobra command with support for <code>--input-format</code> and <code>--output-format</code> flags (JSON and MessagePack).</li> <li>Corrected the <code>validate-value</code> command to remove the erroneous <code>fmt.Sprintf(\"%q\", typeString)</code> quoting.</li> </ul> </li> <li> <p>Go Module and Protobuf Generation Fixes:</p> <ul> <li>Corrected <code>ctyjson</code> and <code>ctymsgpack</code> import paths in <code>cmd/cty.go</code> to <code>github.com/zclconf/go-cty/cty/json</code> and <code>github.com/zclconf/go-cty/cty/msgpack</code>.</li> <li>Removed the conflicting <code>github.com/hashicorp/go-cty</code> dependency from <code>go.mod</code>.</li> <li>Manually created <code>tofusoup/src/tofusoup/harness/go/soup-go/proto</code> and copied <code>kv.proto</code> into it.</li> <li>Manually ran <code>protoc</code> with explicit plugin paths (<code>--plugin=protoc-gen-go=...</code>, <code>--plugin=protoc-gen-go-grpc=...</code>) to generate the Go protobuf code.</li> <li>Removed the <code>go:generate</code> directive from <code>plugin.go</code> (as manual generation is currently being used).</li> <li>Performed an aggressive clean of Go module cache and re-initialized the module.</li> <li>Attempted to resolve module path issues by moving <code>soup-go</code> directory contents to a temporary location and back.</li> </ul> </li> </ul>"},{"location":"STATUS/#4-current-status","title":"4. Current Status","text":"<p>MAJOR PROGRESS: The Go harness build issues have been resolved and comprehensive RPC matrix testing infrastructure is now operational.</p> <p>Key Achievements:</p> <ul> <li> <p>\u2705 Go Harness Build Fixed: The <code>soup-go</code> binary now builds successfully after fixing critical path and build configuration issues:</p> <ul> <li>Fixed variable scope error in <code>harness/go/build.py:39</code> (harness_source_dir indentation)</li> <li>Corrected source directory path in <code>harness/logic.py:12</code> to point to correct location</li> <li><code>soup test all</code> now runs successfully with improved test results</li> </ul> </li> <li> <p>\u2705 RPC Matrix Testing Infrastructure Complete:</p> <ul> <li>Comprehensive matrix testing framework implemented for all client-server-crypto combinations</li> <li>Python\u2192Go RPC: WORKING (TLS disabled mode confirmed functional)</li> <li>Go\u2192Go RPC: WORKING (CLI verified)</li> <li>Go\u2192Python RPC: CONFIRMED WORKING in Terraform context (user validated)</li> <li>Python\u2192Python RPC: Known plugin handshake timeout issues</li> </ul> </li> <li> <p>\u2705 AutoMTLS Compatibility Testing:</p> <ul> <li>Documented asymmetric autoMTLS behavior: Go can connect to Python, but Python cannot connect to Go</li> <li>SSL/TLS handshake failures identified as implementation bugs in grpcio plugin, not \"expected\" behavior</li> <li>Complete test suite covers RSA 2048/4096 and EC P-256/P-384/P-521 across all combinations</li> </ul> </li> </ul> <p>Current Issues:</p> <ul> <li> <p>SSL/TLS Handshake Failures: Python client experiences \"Invalid certificate verification context\" errors when connecting to Go servers with autoMTLS enabled. This is a bug in the C-based grpcio plugin implementation, not expected behavior.</p> </li> <li> <p>Python Server Plugin Handshake: Python server has timeout issues during plugin protocol negotiation, affecting Python\u2192Python and some Go\u2192Python scenarios.</p> </li> </ul>"},{"location":"STATUS/#5-detailed-checklist-of-remaining-tasks","title":"5. Detailed Checklist of Remaining Tasks","text":"<p>This checklist prioritizes tasks to achieve a fully functional <code>tofusoup</code> conformance suite.</p> <p>P0: RPC Matrix Testing (COMPLETED \u2705) *   [\u2705] Go Harness Build Fixed: Core build issues resolved *   [\u2705] Matrix Testing Infrastructure: Comprehensive test framework implemented *   [\u2705] AutoMTLS Compatibility Verification: All combinations documented</p> <p>P1: SSL/TLS Implementation Bug Fixes *   [\ud83d\udd34] Fix grpcio SSL Handshake Bug: Address \"Invalid certificate verification context\" errors in Python client when connecting to Go servers with autoMTLS *   [\ud83d\udd34] Fix Python Server Plugin Handshake: Resolve timeout issues during plugin protocol negotiation *   [\ud83d\udea7] Certificate Generation Compatibility: Ensure cross-language certificate compatibility between Go's auto-generated certs and Python's grpcio</p> <p>P2: Complete <code>soup-go</code> CTY Functionality *   [\u2705] Verify <code>cty convert</code>: Command structure implemented and functional \u2705 *   [\u2705] Verify <code>cty validate-value</code>: Command structure implemented and functional \u2705 *   [\ud83d\udea7] Cross-language CTY Testing: Verify complex CTY type conversions work correctly between Python and Go</p> <p>P3: Implement Remaining <code>soup-go</code> CLI Commands (As per <code>tofusoup/docs/README.md</code>) *   [\ud83d\udea7] Implement <code>soup-go hcl</code> commands: \ud83d\udcdd     *   [ ] <code>soup-go hcl view</code> \ud83d\udc41\ufe0f     *   [ ] <code>soup-go hcl convert</code> \u2194\ufe0f *   [\ud83d\udea7] Implement <code>soup-go wire</code> commands: \ud83d\udd0c     *   [ ] <code>soup-go wire encode</code> \u27a1\ufe0f     *   [ ] <code>soup-go wire decode</code> \u2b05\ufe0f *   [\u2705] RPC commands implemented: \ud83d\udcde     *   [\u2705] <code>soup-go rpc server-start</code> \ud83d\ude80     *   [\u2705] <code>soup-go rpc kv-get</code> \ud83d\udce5     *   [\u2705] <code>soup-go rpc kv-put</code> \ud83d\udce4</p> <p>P4: Enhanced Matrix Testing *   [\ud83d\udea7] Go Client Plugin Pattern: Implement Go client that uses plugin pattern to connect to Python servers (to match Terraform behavior) *   [\ud83d\udea7] Automated CI Matrix Testing: Set up automated testing of all matrix combinations *   [\ud83d\udea7] Performance Benchmarking: Add performance metrics to matrix testing</p>"},{"location":"STATUS/#6-matrix-testing-results-summary","title":"6. Matrix Testing Results Summary","text":"<p>Complete RPC Matrix Status (20 total combinations):</p> Client Server TLS Mode RSA 2048/4096 EC P-256/P-384 EC P-521 Python Go Disabled \u2705 Working \u2705 Working \u2705 Working Python Go Auto \u274c SSL Bug \u274c SSL Bug \u274c SSL Bug Go Go Disabled \u2705 Working \u2705 Working \u2705 Working Go Go Auto \u2705 Working \u2705 Working \u2705 Working Go Python Disabled \ud83d\udea7 Needs Test \ud83d\udea7 Needs Test \ud83d\udea7 Needs Test Go Python Auto \u2705 Working* \u2705 Working* \ud83d\udea7 Needs Test Python Python Disabled \u274c Handshake \u274c Handshake \u274c Handshake Python Python Auto \u274c Handshake \u274c Handshake \u274c Handshake <p>* Confirmed working in Terraform context (user validated)</p> <p>Key Findings: - Asymmetric AutoMTLS Behavior: Go clients can connect to Python servers with autoMTLS, but Python clients cannot connect to Go servers - SSL Implementation Bug: Python grpcio has certificate verification context issues - Plugin Handshake Issues: Python servers have timeout problems during plugin negotiation - No \"Expected\" Failures: All failures are implementation bugs, not architectural limitations</p>"},{"location":"rpc-compatibility-matrix/","title":"RPC Cross-Language Compatibility Matrix","text":"<p>This document details the compatibility matrix for cross-language RPC connections in tofusoup, including client-server language pairs and cryptographic curve support.</p>"},{"location":"rpc-compatibility-matrix/#language-pair-compatibility","title":"Language Pair Compatibility","text":"Client \u2192 Server Status Notes Python \u2192 Python \u2705 Supported Full support with all features Go \u2192 Python \u2705 Supported Recommended for cross-language scenarios Go \u2192 Go \u2705 Supported Full support with all features Python \u2192 Go \u274c Not Supported Known bug in pyvider-rpcplugin"},{"location":"rpc-compatibility-matrix/#known-issues","title":"Known Issues","text":""},{"location":"rpc-compatibility-matrix/#python-go-connection-failure","title":"Python \u2192 Go Connection Failure","text":"<p>Problem: Python clients cannot connect to Go servers due to a TLS handshake incompatibility in pyvider-rpcplugin.</p> <p>Symptoms: - Connection timeout after 10-30 seconds - TLS handshake failure errors - Server process starts but client cannot establish channel</p> <p>Workarounds: 1. Use Go client \u2192 Python server (recommended for cross-language scenarios) 2. Use Python client \u2192 Python server (pure Python) 3. Use Go client \u2192 Go server (pure Go)</p> <p>Related Issues: - pyvider-rpcplugin: Incompatibility with go-plugin server TLS handshake - Expected to be resolved in future pyvider releases</p>"},{"location":"rpc-compatibility-matrix/#elliptic-curve-support","title":"Elliptic Curve Support","text":""},{"location":"rpc-compatibility-matrix/#python-runtime-grpcio","title":"Python Runtime (grpcio)","text":"Curve Status Notes secp256r1 (P-256) \u2705 Supported Recommended, widely compatible secp384r1 (P-384) \u2705 Supported Higher security margin secp521r1 (P-521) \u274c Not Supported grpcio limitation"},{"location":"rpc-compatibility-matrix/#go-runtime-cryptotls","title":"Go Runtime (crypto/tls)","text":"Curve Status Notes secp256r1 (P-256) \u2705 Supported Recommended, widely compatible secp384r1 (P-384) \u2705 Supported Higher security margin secp521r1 (P-521) \u2705 Supported Highest security, Go only"},{"location":"rpc-compatibility-matrix/#curve-compatibility-notes","title":"Curve Compatibility Notes","text":"<ul> <li>Python servers: Only accept connections with <code>secp256r1</code> or <code>secp384r1</code></li> <li>Go servers: Accept connections with any standard NIST curve</li> <li>Cross-language: When connecting Go \u2192 Python, use <code>secp256r1</code> or <code>secp384r1</code></li> <li>Auto mode: Set <code>tls_curve=\"auto\"</code> to let the runtime choose (uses secp256r1)</li> </ul>"},{"location":"rpc-compatibility-matrix/#tls-mode-compatibility","title":"TLS Mode Compatibility","text":""},{"location":"rpc-compatibility-matrix/#supported-tls-modes","title":"Supported TLS Modes","text":"Mode Description Compatibility <code>disabled</code> No encryption Both Python and Go <code>auto</code> Automatic mTLS with generated certs Both Python and Go <code>manual</code> User-provided certificates Both Python and Go"},{"location":"rpc-compatibility-matrix/#tls-mode-requirements","title":"TLS Mode Requirements","text":"<p>Auto Mode: - Server and client must both use <code>auto</code> mode - Specify <code>tls_key_type</code> (default: <code>\"ec\"</code>) - Specify <code>tls_curve</code> for EC keys (default: <code>\"secp256r1\"</code>) - Certificates generated automatically</p> <p>Manual Mode: - Provide <code>cert_file</code> and <code>key_file</code> parameters - Certificates must be compatible (matching key types and curves) - Both client and server need matching CA certificates</p>"},{"location":"rpc-compatibility-matrix/#testing-compatibility","title":"Testing Compatibility","text":""},{"location":"rpc-compatibility-matrix/#automated-test-coverage","title":"Automated Test Coverage","text":"<p>The test suite validates all supported combinations:</p> <pre><code># Run all compatibility tests\npytest tests/integration/\n\n# Run specific test suites\npytest tests/integration/test_cross_language_matrix.py    # Language pairs\npytest tests/integration/test_curve_support.py            # Curve validation\npytest tests/integration/test_error_scenarios.py          # Error handling\n</code></pre>"},{"location":"rpc-compatibility-matrix/#test-matrix","title":"Test Matrix","text":"<p>The following combinations are tested automatically:</p> Test Scenario Client Server Curve Expected Result Python basic Python Python secp256r1 \u2705 Pass Python P-384 Python Python secp384r1 \u2705 Pass Go \u2192 Python Go Python auto \u2705 Pass Go \u2192 Go Go Go secp384r1 \u2705 Pass Python P-521 Python Python secp521r1 \u274c Expected Fail Python \u2192 Go Python Go any \u23ed\ufe0f Skipped (known bug)"},{"location":"rpc-compatibility-matrix/#cli-validation","title":"CLI Validation","text":"<p>Use the validation command to check compatibility before connecting:</p> <pre><code># Check if a connection will work\nsoup rpc validate-connection --client python --server /path/to/soup-go\n\n# Output:\n# \u26a0\ufe0f  Python \u2192 Go connections not supported\n# \u2713  Supported alternatives:\n#    - Go \u2192 Python (recommended)\n#    - Python \u2192 Python\n#    - Go \u2192 Go\n</code></pre>"},{"location":"rpc-compatibility-matrix/#recommendations","title":"Recommendations","text":""},{"location":"rpc-compatibility-matrix/#for-production-use","title":"For Production Use","text":"<ol> <li>Use Go \u2192 Python for cross-language scenarios (most reliable)</li> <li>Use secp256r1 or secp384r1 for Python servers</li> <li>Use auto TLS mode unless you have specific cert requirements</li> <li>Test your configuration with <code>soup rpc validate-connection</code> before deployment</li> </ol>"},{"location":"rpc-compatibility-matrix/#for-development","title":"For Development","text":"<ol> <li>Use Python \u2192 Python for quick iteration on Python code</li> <li>Use Go \u2192 Go for quick iteration on Go code</li> <li>Avoid Python \u2192 Go until the bug is fixed</li> <li>Run integration tests to verify your setup: <code>pytest tests/integration/</code></li> </ol>"},{"location":"rpc-compatibility-matrix/#error-messages","title":"Error Messages","text":"<p>When encountering compatibility issues, the client provides helpful error messages:</p>"},{"location":"rpc-compatibility-matrix/#python-go-timeout","title":"Python \u2192 Go Timeout","text":"<pre><code>Connection timeout after 15.234s - Python client \u2192 Go server is not supported.\n\nThis is a known issue in pyvider-rpcplugin.\n\nSupported alternatives:\n  \u2713 Go client \u2192 Python server (use soup-go binary as client)\n  \u2713 Python client \u2192 Python server\n  \u2713 Go client \u2192 Go server\n\nServer path: /path/to/soup-go\n</code></pre>"},{"location":"rpc-compatibility-matrix/#unsupported-curve","title":"Unsupported Curve","text":"<pre><code>Curve 'secp521r1' is not supported by Python's grpcio library.\nSupported curves for Python: secp256r1, secp384r1\n\nOriginal error: TimeoutError: Connection timeout\n</code></pre>"},{"location":"rpc-compatibility-matrix/#future-improvements","title":"Future Improvements","text":"<p>Planned enhancements to the compatibility matrix:</p> <ol> <li>Fix Python \u2192 Go connection (pyvider-rpcplugin update needed)</li> <li>Add Rust client/server support (future runtime)</li> <li>Add secp521r1 support for Python (requires grpcio update or alternative)</li> <li>Enhanced curve negotiation (automatic downgrade for compatibility)</li> </ol>"},{"location":"rpc-compatibility-matrix/#related-documentation","title":"Related Documentation","text":"<ul> <li>RPC Architecture</li> <li>TLS Configuration Guide</li> <li>Testing Guide</li> <li>pyvider-rpcplugin Documentation</li> </ul> <p>Last Updated: 2025-10-11</p>"},{"location":"api/","title":"TofuSoup API","text":"<p>Auto-generated API documentation for <code>tofusoup</code>.</p>"},{"location":"api/#tofusoup-attributes","title":"Attributes","text":""},{"location":"api/#tofusoup.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = get_version('tofusoup', caller_file=__file__)\n</code></pre>"},{"location":"api/#tofusoup.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ['__version__']\n</code></pre>"},{"location":"architecture/01-overview/","title":"Architecture Overview","text":"<p>The <code>TofuSoup</code> project is a modular, CLI-driven framework designed for cross-language conformance testing and development tooling within the OpenTofu ecosystem.</p> <p>The architecture is segmented into several key domains:</p> <ol> <li> <p>Main CLI (<code>cli.py</code>): The central entry point, built with <code>click</code>. It uses a <code>LazyGroup</code> to ensure fast startup times by only loading the code for a specific subcommand when it is invoked.</p> </li> <li> <p>Core Utilities (<code>common/</code>): Provides shared services for all other components, including:</p> <ul> <li>Configuration (<code>config.py</code>): Loads and parses the <code>soup.toml</code> file.</li> <li>Exceptions (<code>exceptions.py</code>): Defines custom, project-specific exceptions.</li> <li>Rich Output (<code>rich_utils.py</code>): Helpers for creating enhanced terminal output with the <code>rich</code> library.</li> </ul> </li> <li> <p>Protocol/Component Tooling: Each core technology (<code>cty</code>, <code>hcl</code>, <code>rpc</code>, <code>wire</code>) has a dedicated module containing its CLI implementation and business logic. This modular design makes the system easy to extend.</p> </li> <li> <p>Harness Management (<code>harness/</code>): This component is responsible for the lifecycle of external test harnesses, which are primarily Go binaries. It abstracts the details of building, locating, and cleaning these executables, with behavior configurable via <code>soup.toml</code>.</p> </li> <li> <p>Conformance Testing (<code>testing/</code>, <code>conformance/</code>): This is the core of the suite. The <code>testing/</code> module provides the <code>soup test</code> CLI and logic for invoking <code>pytest</code>. The actual test suites reside in <code>conformance/</code>.</p> </li> <li> <p>Documentation (<code>docs/</code>, <code>.garnish</code> system): A co-located documentation framework that treats documentation as a first-class citizen of the development process, tightly coupling it with the source code to prevent drift.</p> </li> </ol>"},{"location":"architecture/02-conformance-testing-strategy/","title":"Conformance Testing Strategy","text":"<p>This document outlines the architecture for the TofuSoup conformance testing suite.</p>"},{"location":"architecture/02-conformance-testing-strategy/#testing-philosophy-souptest-vs-pytest","title":"Testing Philosophy: <code>souptest</code> vs. <code>pytest</code>","text":"<p>A core distinction in this project is the separation of concerns in testing: -   Conformance Tests (<code>souptest_*.py</code>): These tests, located in <code>tofusoup/conformance/</code>, are for verifying cross-language compatibility. They compare the behavior of Python implementations against the canonical Go harnesses. They are run via the <code>soup test</code> command. -   Internal Tests (<code>test_*.py</code>): These are standard unit and integration tests for the <code>tofusoup</code> tool itself. They are located in <code>tofusoup/tests/</code> and are run using <code>pytest</code> directly.</p>"},{"location":"architecture/02-conformance-testing-strategy/#architectural-design","title":"Architectural Design","text":"<p>The conformance suite is organized into a hierarchical and purpose-driven structure to ensure clarity, prevent duplication, and provide a scalable foundation for comprehensive testing.</p>"},{"location":"architecture/02-conformance-testing-strategy/#design-principles","title":"Design Principles","text":"<ol> <li>Hierarchical Organization: Reflect test complexity and dependencies.</li> <li>Cross-Cutting Separation: Create dedicated areas for security, performance, and integration.</li> <li>Single Source of Truth: Eliminate duplication in test scenarios and fixtures.</li> <li>Clear Purpose: Each directory has an explicit, non-overlapping responsibility.</li> </ol>"},{"location":"architecture/02-conformance-testing-strategy/#directory-structure","title":"Directory Structure","text":"<pre><code>conformance/\n\u251c\u2500\u2500 README.md                           # Testing strategy and execution guide\n\u251c\u2500\u2500 conftest.py                         # Global fixtures and matrix configurations\n\u2502\n\u251c\u2500\u2500 unit/                               # Individual protocol conformance\n\u2502   \u251c\u2500\u2500 souptest_cty_conformance.py\n\u2502   \u251c\u2500\u2500 souptest_wire_conformance.py\n\u2502   \u2514\u2500\u2500 souptest_rpc_conformance.py\n\u2502\n\u251c\u2500\u2500 integration/                        # Cross-protocol integration testing\n\u2502   \u251c\u2500\u2500 souptest_full_stack_matrix.py      # Complete CTY\u2192Wire\u2192RPC flow\n\u2502   \u2514\u2500\u2500 souptest_provider_lifecycle.py     # Full Terraform provider scenarios\n\u2502\n\u251c\u2500\u2500 security/                           # Security-focused conformance\n\u2502   \u2514\u2500\u2500 souptest_crypto_matrix.py          # All cipher/curve combinations\n\u2502\n\u251c\u2500\u2500 scenarios/                          # End-to-end BDD-style scenario testing\n\u2502   \u251c\u2500\u2500 terraform_equivalence/\n\u2502   \u2502   \u251c\u2500\u2500 basic_operations.feature\n\u2502   \u2502   \u2514\u2500\u2500 step_definitions/\n\u2502   \u2514\u2500\u2500 souptest_scenario_runner.py\n\u2502\n\u2514\u2500\u2500 fixtures/                           # Shared test data and configuration\n    \u251c\u2500\u2500 cty_data/\n    \u2514\u2500\u2500 certificates/\n</code></pre> <p>This architecture provides a robust framework for implementing matrix-based testing and ensuring systematic validation of TofuSoup components against their canonical Go counterparts.</p>"},{"location":"architecture/03-rpc-matrix-specification/","title":"RPC K/V Matrix Testing Specification","text":"<p>This document specifies the design for a systematic, matrix-based test suite for the RPC Key/Value store example. It focuses on covering all combinations of client/server language implementations and cryptographic configurations.</p>"},{"location":"architecture/03-rpc-matrix-specification/#testing-matrix-dimensions","title":"Testing Matrix Dimensions","text":""},{"location":"architecture/03-rpc-matrix-specification/#1-language-implementation-combinations","title":"1. Language Implementation Combinations","text":"<ul> <li>Client Languages: <code>go</code>, <code>pyvider</code></li> <li>Server Languages: <code>go</code>, <code>pyvider</code></li> <li>Total Combinations: 4 client-server pairs</li> </ul>"},{"location":"architecture/03-rpc-matrix-specification/#2-authentication-crypto-matrix","title":"2. Authentication &amp; Crypto Matrix","text":"<ul> <li>Authentication Mode: <code>auto_mtls</code> (Automatic mutual TLS with certificate generation)</li> <li>RSA Key Sizes: <code>rsa_2048</code>, <code>rsa_4096</code></li> <li>Elliptic Curve Options: <code>ec_256</code> (P-256), <code>ec_384</code> (P-384), <code>ec_521</code> (P-521)</li> </ul> <p>This results in 5 unique cryptographic configurations to be tested against each of the 4 language combinations, for a total of 20 distinct test cases.</p>"},{"location":"architecture/03-rpc-matrix-specification/#implementation-specification","title":"Implementation Specification","text":"<p>The test suite will be implemented using <code>pytest</code> parameterization.</p>"},{"location":"architecture/03-rpc-matrix-specification/#1-matrix-configuration-matrix_configpy","title":"1. Matrix Configuration (<code>matrix_config.py</code>)","text":"<p>A central file will define the parameters for the matrix, generating a list of <code>pytest.param</code> objects. Each parameter set will contain the client language, server language, and a <code>CryptoConfig</code> object detailing the required mTLS setup.</p>"},{"location":"architecture/03-rpc-matrix-specification/#2-test-implementation-test_rpc_kv_matrixpy","title":"2. Test Implementation (<code>test_rpc_kv_matrix.py</code>)","text":"<p>A single, parameterized test function, <code>test_rpc_kv_operations_matrix</code>, will execute the core test logic for every combination generated by the matrix configuration. The test logic will: 1.  Create an isolated temporary directory for the test run. 2.  Start the appropriate server (Go or Python) with the specified crypto configuration. 3.  Create a client (Go or Python) configured to connect to the server. 4.  Perform <code>PUT</code>, <code>GET</code>, and <code>DELETE</code> operations, verifying the correctness of each. 5.  Test error handling, such as getting a non-existent key.</p>"},{"location":"architecture/03-rpc-matrix-specification/#3-harness-factory-harnesskv_factorypy","title":"3. Harness Factory (<code>harness/kv_factory.py</code>)","text":"<p>Factory functions (<code>create_kv_server</code>, <code>create_kv_client</code>) will abstract the creation of server and client instances. Based on the <code>language</code> parameter, these factories will return a running instance of either the Go or Python harness, configured for the specific test.</p> <p>This focused specification ensures systematic validation of RPC K/V functionality across all required language and cryptographic combinations while maintaining clean, maintainable test code.</p>"},{"location":"architecture/04-garnish-asset-bundle-system/","title":"Macro Rendering Error","text":"<p>File: <code>architecture/04-garnish-asset-bundle-system.md</code></p> <p>UndefinedError: 'schema' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 86, in top-level template code\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/utils.py\", line 92, in from_obj\n    if hasattr(obj, \"jinja_pass_arg\"):\n       ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\njinja2.exceptions.UndefinedError: 'schema' is undefined\n</code></pre>"},{"location":"architecture/05-wire-protocol-details/","title":"Terraform Object Wire Protocol: Dynamic Type Encoding","text":"<p>This document details how CTY Dynamic Values (<code>cty.DynamicPseudoType</code>) are encoded and decoded in the TofuSoup project, ensuring compatibility between the Go reference harness and the Python <code>pyvider</code> libraries.</p>"},{"location":"architecture/05-wire-protocol-details/#dynamic-value-wire-format","title":"Dynamic Value Wire Format","text":"<p>When a <code>cty.DynamicVal</code> is transmitted using the Terraform Object Wire Protocol (which uses MessagePack), it is encoded as a 2-element MessagePack array:</p> <pre><code>[ &lt;type_specification_bytes&gt;, &lt;value_bytes&gt; ]\n</code></pre> <ol> <li> <p><code>&lt;type_specification_bytes&gt;</code> (First Element):</p> <ul> <li>This element represents the concrete type of the value that the dynamic value actually holds.</li> <li>Encoding Process:<ol> <li>The concrete <code>cty.Type</code> of the value is determined (e.g., <code>cty.String</code>).</li> <li>This type is marshalled into its JSON string representation (e.g., <code>\"string\"</code> or <code>[\"list\",\"number\"]</code>).</li> <li>The UTF-8 bytes of this JSON string are then encoded as a MessagePack binary data type (<code>bin</code> family).</li> </ol> </li> </ul> </li> <li> <p><code>&lt;value_bytes&gt;</code> (Second Element):</p> <ul> <li>This element is the standard MessagePack encoding of the concrete <code>cty.Value</code> itself.</li> </ul> </li> </ol>"},{"location":"architecture/05-wire-protocol-details/#example","title":"Example","text":"<p>Consider a dynamic value holding <code>cty.StringVal(\"hello\")</code>.</p> <ol> <li>Concrete Type: <code>cty.String</code></li> <li>JSON Type String: The literal string <code>\"string\"</code>.</li> <li><code>&lt;type_specification_bytes&gt;</code>: The MessagePack <code>bin</code> encoding of the UTF-8 bytes for <code>\"string\"</code>.<ul> <li>Hex: <code>c40822737472696e6722</code></li> </ul> </li> <li>Concrete Value: <code>cty.StringVal(\"hello\")</code></li> <li><code>&lt;value_bytes&gt;</code>: The MessagePack <code>str</code> encoding of \"hello\".<ul> <li>Hex: <code>a568656c6c6f</code></li> </ul> </li> <li>Final 2-Element Msgpack Array:<ul> <li>Hex: <code>92c40822737472696e6722a568656c6c6f</code></li> </ul> </li> <li>Base64 Representation: <code>ksQIInN0cmluZyKlaGVsbG8=</code></li> </ol> <p>This method ensures that the type constraint of the dynamic value is clearly and unambiguously encoded in the wire format, allowing the decoding side to correctly interpret the subsequent value bytes.</p>"},{"location":"architecture/06-polyglot-cli-strategy/","title":"Polyglot CLI Strategy","text":"<p>This document outlines the architectural strategy for creating a family of TofuSoup command-line interfaces across multiple languages, ensuring a consistent developer experience and robust, symmetric testing capabilities.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#1-core-principle-feature-parity","title":"1. Core Principle: Feature Parity","text":"<p>The primary goal is to achieve feature parity between the main Python-based <code>soup</code> CLI and its counterparts in other languages, starting with Go (<code>soup-go</code>). This means that where applicable, a developer should be able to use the same commands, subcommands, and flags in <code>soup-go</code> as they would in <code>soup</code>.</p> <p>This creates a predictable and powerful ecosystem where developers can use the tools in their preferred language, and the testing suite can validate Python components against Go components using an identical set of commands.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#2-go-implementation-soup-go","title":"2. Go Implementation: <code>soup-go</code>","text":"<p>The Go implementation of the TofuSoup CLI will be named <code>soup-go</code> and will be built using the Cobra library to provide a robust and familiar CLI structure. The existing Go harnesses (<code>go-cty</code>, <code>go-hcl</code>, etc.) will be refactored and integrated into this single, unified <code>soup-go</code> binary.</p>"},{"location":"architecture/06-polyglot-cli-strategy/#target-soup-go-structure","title":"Target <code>soup-go</code> Structure","text":"<p>The <code>soup-go</code> CLI will mirror the structure of the Python <code>soup</code> CLI.</p> <p>Hypothetical <code>soup-go --help</code> Output: <pre><code>A Go implementation of the TofuSoup conformance and utility toolkit.\n\nUsage:\n  soup-go [command]\n\nAvailable Commands:\n  cty         Utilities for CTY data (view, convert, validate)\n  hcl         Utilities for HCL file processing (view, convert)\n  rpc         Utilities for testing RPC components (kv get, kv put)\n  wire        Tools for encoding/decoding Terraform Wire Protocol objects\n  help        Help about any command\n\nFlags:\n  -h, --help          help for soup-go\n      --log-level string   Set the logging level (default \"info\")\n</code></pre></p>"},{"location":"architecture/06-polyglot-cli-strategy/#3-role-in-conformance-testing","title":"3. Role in Conformance Testing","text":"<p>This strategy transforms the Go harnesses from simple, single-purpose test executables into a full-featured, language-specific implementation of the TofuSoup toolkit. This enables a powerful, symmetric testing model:</p> <ul> <li>Python vs. Go: The <code>soup test</code> command can invoke <code>soup-go</code> to get canonical outputs for comparison.</li> <li>Go vs. Python: A future Go-based test runner could invoke the Python <code>soup</code> CLI to validate Go components.</li> </ul> <p>This ensures that the entire toolchain, not just the underlying libraries, is conformant across languages.</p>"},{"location":"architecture/07-stock-service-design/","title":"Stock Service Design Document","text":""},{"location":"architecture/07-stock-service-design/#overview","title":"Overview","text":"<p>The Stock service is a multi-language gRPC service designed to test cross-language compatibility without the complexity of plugin handshakes. It extends the simple key-value pattern from kvproto with additional gRPC patterns (streaming, bidirectional) to provide comprehensive testing coverage.</p>"},{"location":"architecture/07-stock-service-design/#motivation","title":"Motivation","text":""},{"location":"architecture/07-stock-service-design/#current-state","title":"Current State","text":"<ul> <li>TofuSoup's RPC tests focus on plugin protocol compatibility (go-plugin framework)</li> <li>The existing kvproto project tests direct gRPC but lives outside TofuSoup</li> <li>Plugin protocol adds complexity when testing basic gRPC interoperability</li> </ul>"},{"location":"architecture/07-stock-service-design/#goals","title":"Goals","text":"<ol> <li>Test pure gRPC compatibility across 10+ languages</li> <li>Provide a standard service that exercises all gRPC communication patterns</li> <li>Integrate kvproto's multi-language implementations into TofuSoup</li> <li>Enable testing of pyvider servers in <code>--force</code> mode with non-plugin clients</li> </ol>"},{"location":"architecture/07-stock-service-design/#architecture","title":"Architecture","text":""},{"location":"architecture/07-stock-service-design/#service-name-stock","title":"Service Name: Stock","text":"<p>The name \"Stock\" works on multiple levels: - Soup stock: The base/foundation of soup (fitting TofuSoup theme) - Inventory stock: Storage metaphor for key-value operations - Stock market: Streaming updates and trading metaphor for bidirectional streams</p>"},{"location":"architecture/07-stock-service-design/#directory-structure","title":"Directory Structure","text":"<pre><code>tofusoup/\n\u251c\u2500\u2500 conformance/\n\u2502   \u2514\u2500\u2500 stock/              # Stock service conformance tests\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 conftest.py\n\u2502       \u251c\u2500\u2500 matrix_config.py\n\u2502       \u2514\u2500\u2500 souptest_stock_matrix.py\n\u251c\u2500\u2500 stock/                  # All Stock implementations\n\u2502   \u251c\u2500\u2500 proto/\n\u2502   \u2502   \u2514\u2500\u2500 stock.proto     # Single source of truth\n\u2502   \u251c\u2500\u2500 go/\n\u2502   \u2502   \u251c\u2500\u2500 cmd/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 client/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 server/\n\u2502   \u2502   \u251c\u2500\u2500 go.mod\n\u2502   \u2502   \u2514\u2500\u2500 Makefile\n\u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u251c\u2500\u2500 stock_client.py\n\u2502   \u2502   \u251c\u2500\u2500 stock_server.py\n\u2502   \u2502   \u2514\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u251c\u2500\u2500 pom.xml\n\u2502   \u2502   \u2514\u2500\u2500 src/main/java/\n\u2502   \u251c\u2500\u2500 ruby/\n\u2502   \u251c\u2500\u2500 rust/\n\u2502   \u251c\u2500\u2500 csharp/\n\u2502   \u2514\u2500\u2500 ... (other languages)\n\u2514\u2500\u2500 src/tofusoup/\n    \u2514\u2500\u2500 stock/              # Stock CLI integration\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 cli.py          # CLI commands\n        \u2514\u2500\u2500 harness.py      # Build/management logic\n</code></pre>"},{"location":"architecture/07-stock-service-design/#proto-definition","title":"Proto Definition","text":"<pre><code>service Stock {\n    // Basic KV operations (unary) - backwards compatible\n    rpc Get(GetRequest) returns (GetResponse);\n    rpc Put(PutRequest) returns (Empty);\n\n    // Server streaming - monitor changes\n    rpc Monitor(WatchRequest) returns (stream WatchEvent);\n\n    // Client streaming - batch operations\n    rpc Batch(stream BatchItem) returns (BatchSummary);\n\n    // Bidirectional - trading simulation\n    rpc Trade(stream TradeOrder) returns (stream TradeFill);\n\n    // Status/health check\n    rpc Inventory(Empty) returns (InventoryStatus);\n}\n</code></pre>"},{"location":"architecture/07-stock-service-design/#cli-design","title":"CLI Design","text":""},{"location":"architecture/07-stock-service-design/#language-first-commands","title":"Language-First Commands","text":"<pre><code># Start servers\nsoup stock go server --port 50051\nsoup stock python server --tls-mode auto\nsoup stock java server --cert-file server.crt\n\n# Run clients\nsoup stock ruby client get mykey --server localhost:50051\nsoup stock rust client put mykey \"value\" --server localhost:50051\nsoup stock go client monitor \"prefix/*\" --server localhost:50051\n\n# Convenience shortcuts (defaults to Python)\nsoup stock get mykey\nsoup stock put mykey \"value\"\nsoup stock inventory\n</code></pre>"},{"location":"architecture/07-stock-service-design/#why-not-under-soup-rpc","title":"Why Not Under <code>soup rpc</code>?","text":"<ol> <li>Clear Separation: </li> <li><code>soup rpc</code> = Plugin protocol (handshake, broker, stdio)</li> <li> <p><code>soup stock</code> = Direct gRPC (no handshake)</p> </li> <li> <p>Different Use Cases:</p> </li> <li><code>soup rpc</code> tests Terraform provider compatibility</li> <li> <p><code>soup stock</code> tests language interoperability</p> </li> <li> <p>Simpler Mental Model:</p> </li> <li>Stock is a standalone service, not a variant of RPC</li> </ol>"},{"location":"architecture/07-stock-service-design/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"architecture/07-stock-service-design/#phase-1-core-languages-week-1","title":"Phase 1: Core Languages (Week 1)","text":"<ul> <li>[ ] Python implementation (base reference)</li> <li>[ ] Go implementation (performance baseline)</li> <li>[ ] Proto compilation setup for all languages</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-2-migrate-kvproto-week-2","title":"Phase 2: Migrate kvproto (Week 2)","text":"<ul> <li>[ ] Move existing kvproto implementations</li> <li>[ ] Update to use Stock proto definition</li> <li>[ ] Standardize CLI interface across languages</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-3-testing-infrastructure-week-3","title":"Phase 3: Testing Infrastructure (Week 3)","text":"<ul> <li>[ ] Matrix test configuration</li> <li>[ ] Performance benchmarks</li> <li>[ ] TLS/mTLS test scenarios</li> </ul>"},{"location":"architecture/07-stock-service-design/#phase-4-additional-languages-week-4","title":"Phase 4: Additional Languages (Week 4+)","text":"<ul> <li>[ ] Java, Ruby, C#, Rust implementations</li> <li>[ ] JavaScript/Node.js, C++, PHP</li> <li>[ ] Kotlin, Scala, Swift (stretch goals)</li> </ul>"},{"location":"architecture/07-stock-service-design/#testing-matrix","title":"Testing Matrix","text":""},{"location":"architecture/07-stock-service-design/#dimensions","title":"Dimensions","text":"<ol> <li>Client Language: 10+ implementations</li> <li>Server Language: 10+ implementations  </li> <li>TLS Configuration: none, server-only, mTLS</li> <li>Operations: get/put, streaming, batch, bidirectional</li> </ol>"},{"location":"architecture/07-stock-service-design/#example-test-cases","title":"Example Test Cases","text":"<ul> <li>Python client \u2192 Go server (mTLS, streaming)</li> <li>Java client \u2192 Ruby server (no TLS, batch operations)</li> <li>Rust client \u2192 Python server (server TLS, bidirectional)</li> </ul> <p>Total potential combinations: 10 \u00d7 10 \u00d7 3 \u00d7 4 = 1,200 tests</p>"},{"location":"architecture/07-stock-service-design/#optimized-test-subsets","title":"Optimized Test Subsets","text":"<ul> <li>Quick: 3 clients \u00d7 3 servers \u00d7 1 TLS \u00d7 2 ops = 18 tests</li> <li>Standard: 5 clients \u00d7 5 servers \u00d7 2 TLS \u00d7 3 ops = 150 tests</li> <li>Full: All combinations (weekend run)</li> </ul>"},{"location":"architecture/07-stock-service-design/#integration-with-existing-systems","title":"Integration with Existing Systems","text":""},{"location":"architecture/07-stock-service-design/#works-with-pyvider-force-mode","title":"Works With pyvider --force Mode","text":"<pre><code># Start pyvider server without handshake\npython my_provider.py provide --force --port 50051\n\n# Connect with any Stock client\nsoup stock java client get tf_resource_123\nsoup stock go client monitor \"tf_state/*\"\n</code></pre>"},{"location":"architecture/07-stock-service-design/#comparison-with-plugin-rpc","title":"Comparison with Plugin RPC","text":"Feature Plugin RPC (<code>soup rpc</code>) Stock (<code>soup stock</code>) Handshake Required None Port Negotiation Dynamic Fixed Stdio Forwarding Yes No Language Support Go + Python 10+ languages Use Case Terraform providers General gRPC testing"},{"location":"architecture/07-stock-service-design/#success-metrics","title":"Success Metrics","text":"<ol> <li>Coverage: All 10+ languages have working implementations</li> <li>Compatibility: 95%+ of cross-language tests pass</li> <li>Performance: Benchmark data for each language pair</li> <li>Adoption: Stock becomes the standard for gRPC testing in TofuSoup</li> </ol>"},{"location":"architecture/07-stock-service-design/#future-extensions","title":"Future Extensions","text":"<ol> <li>Additional Patterns:</li> <li>Request deadlines/timeouts</li> <li>Metadata/header propagation</li> <li>Compression testing</li> <li> <p>Load balancing scenarios</p> </li> <li> <p>Observability:</p> </li> <li>OpenTelemetry integration</li> <li>Prometheus metrics</li> <li> <p>Distributed tracing</p> </li> <li> <p>Chaos Testing:</p> </li> <li>Network delays</li> <li>Partial failures</li> <li>Message corruption</li> </ol>"},{"location":"architecture/07-stock-service-design/#conclusion","title":"Conclusion","text":"<p>The Stock service provides a clean, focused way to test gRPC compatibility across languages without the complexity of plugin protocols. By integrating kvproto's work and extending it with additional RPC patterns, TofuSoup gains comprehensive cross-language testing capabilities that complement its existing plugin-focused tests.</p>"},{"location":"architecture/soup-go-vs-terraform/","title":"soup-go vs Terraform: Implementation Differences","text":""},{"location":"architecture/soup-go-vs-terraform/#overview","title":"Overview","text":"<p>soup-go does NOT implement CTY/HCL exactly as Terraform does. It's a testing harness that exposes the underlying libraries for cross-language compatibility testing, not a Terraform clone.</p>"},{"location":"architecture/soup-go-vs-terraform/#key-differences","title":"Key Differences","text":""},{"location":"architecture/soup-go-vs-terraform/#1-error-handling","title":"1. \u274c Error Handling","text":"Aspect Terraform soup-go HCL parse errors Exit code 2 Exit code 0 + JSON error Error output Formatted text to stderr JSON to stdout Error display Human-readable with line numbers Machine-readable JSON <p>Example: <pre><code># Terraform with bad HCL\n$ terraform fmt bad.tf\nError: Invalid multi-line string\n  on bad.tf line 2...\n$ echo $?\n2\n\n# soup-go with bad HCL\n$ soup-go hcl parse bad.hcl\n{\"success\": false, \"errors\": [...]}\n$ echo $?\n0\n</code></pre></p>"},{"location":"architecture/soup-go-vs-terraform/#2-output-format","title":"2. \u274c Output Format","text":"Aspect Terraform soup-go Success output Direct output Wrapped in JSON Format Various (HCL, JSON, text) Always JSON with metadata Structure Command-specific Consistent <code>{success, body}</code>"},{"location":"architecture/soup-go-vs-terraform/#3-cli-structure","title":"3. \u274c CLI Structure","text":"Aspect Terraform soup-go Commands Domain-specific (plan, apply) Library-exposing (cty, hcl) Purpose Infrastructure management Testing &amp; validation CTY access Internal only Direct CLI commands HCL access Via validate/fmt Direct parse command"},{"location":"architecture/soup-go-vs-terraform/#4-cty-unknown-value-handling-matches","title":"4. \u2705 CTY Unknown Value Handling (Matches!)","text":"<p>This is where soup-go DOES match Terraform exactly:</p> <ul> <li>Cannot marshal unknown values to JSON \u2705</li> <li>Unknown values only work in MessagePack \u2705</li> <li>Returns \"value is not known\" error \u2705</li> </ul> <pre><code>// Both Terraform and soup-go will fail here:\nunknownVal := cty.UnknownVal(cty.String)\n_, err := ctyjson.Marshal(unknownVal, cty.String)\n// err: \"value is not known\"\n</code></pre>"},{"location":"architecture/soup-go-vs-terraform/#5-library-usage-intent","title":"5. \u274c Library Usage Intent","text":"Aspect Terraform soup-go go-cty usage Internal state/plan management Direct value manipulation HCL usage Configuration parsing Generic HCL parsing Wire protocol Internal plugin communication Exposed for testing MessagePack Internal serialization Exposed for cross-language tests"},{"location":"architecture/soup-go-vs-terraform/#why-these-differences-exist","title":"Why These Differences Exist","text":""},{"location":"architecture/soup-go-vs-terraform/#soup-gos-purpose","title":"soup-go's Purpose","text":"<ul> <li>Testing harness for cross-language compatibility</li> <li>Direct library access for validation</li> <li>Machine-readable output for test automation</li> <li>Consistent JSON interface for programmatic use</li> </ul>"},{"location":"architecture/soup-go-vs-terraform/#terraforms-purpose","title":"Terraform's Purpose","text":"<ul> <li>Infrastructure management tool</li> <li>Human-friendly CLI interface</li> <li>Domain-specific operations</li> <li>Libraries are implementation details, not exposed</li> </ul>"},{"location":"architecture/soup-go-vs-terraform/#what-this-means","title":"What This Means","text":"<ol> <li>soup-go is NOT a drop-in replacement for Terraform commands</li> <li>soup-go exposes lower-level operations that Terraform hides</li> <li>The only \"exact\" match is the core library behavior (like CTY unknown handling)</li> <li>CLI behavior, error codes, and output formats are intentionally different</li> </ol>"},{"location":"architecture/soup-go-vs-terraform/#recommendations","title":"Recommendations","text":"<p>If exact Terraform behavior is needed:</p> <ol> <li>For error codes: soup-go should be updated to return non-zero exit codes on errors</li> <li>For output format: Remove the JSON wrapper or add a <code>--raw</code> flag</li> <li>For CLI structure: This is fundamental to soup-go's purpose and should remain different</li> </ol>"},{"location":"architecture/soup-go-vs-terraform/#conclusion","title":"Conclusion","text":"<p>soup-go uses the same underlying HashiCorp libraries (go-cty, hcl/v2) as Terraform, ensuring library-level compatibility, but wraps them in a different CLI interface designed for testing rather than infrastructure management.</p>"},{"location":"guides/01-running-conformance-tests/","title":"Guide: Running Conformance Tests","text":"<p>The <code>soup test</code> command is the unified entry point for running all Pytest-based conformance test suites. These tests (<code>souptest_*.py</code>) are specifically for verifying cross-language compatibility against the Go harnesses.</p>"},{"location":"guides/01-running-conformance-tests/#running-all-suites","title":"Running All Suites","text":"<p>To execute every defined test suite, use the <code>all</code> subcommand. This is the most common command for a full regression check.</p> <pre><code>soup test all\n</code></pre>"},{"location":"guides/01-running-conformance-tests/#running-a-specific-suite","title":"Running a Specific Suite","text":"<p>You can run a specific suite by name. This is useful for focusing on a particular area of compatibility during development.</p> <pre><code># Run only the CTY compatibility tests\nsoup test cty\n\n# Run only the RPC compatibility tests\nsoup test rpc\n</code></pre> <p>Available suites include <code>cty</code>, <code>rpc</code>, <code>wire</code>, <code>hcl</code>, and more.</p>"},{"location":"guides/01-running-conformance-tests/#passing-arguments-to-pytest","title":"Passing Arguments to Pytest","text":"<p>Any arguments provided after the suite name are passed directly to <code>pytest</code>. This allows you to use any standard <code>pytest</code> flag, such as running tests by keyword (<code>-k</code>) or by marker (<code>-m</code>).</p> <pre><code># Run only tests with \"some_test_name\" in their name within the 'cty' suite\nsoup test cty -k \"some_test_name\"\n\n# Run all 'rpc' tests except those marked as 'slow'\nsoup test rpc -m \"not slow\"\n</code></pre>"},{"location":"guides/01-running-conformance-tests/#configuration","title":"Configuration","text":"<p>Test behavior, such as environment variables, default <code>pytest</code> arguments, and tests to skip, can be configured globally or per-suite in your <code>soup.toml</code> file.</p> <p>Example <code>soup.toml</code>: ```toml [test_suite_defaults] extra_pytest_args = [\"-m\", \"not slow\"]</p> <p>[test_suite.rpc]</p>"},{"location":"guides/01-running-conformance-tests/#set-an-environment-variable-only-for-the-rpc-test-suite","title":"Set an environment variable only for the RPC test suite","text":"<p>env_vars = { SKIP_RUBY_RPC_TESTS = \"1\" }```</p>"},{"location":"guides/02-managing-language-clis/","title":"Guide: Managing Language-Specific CLIs","text":"<p>The <code>soup harness</code> command is used to manage the lifecycle of language-specific implementations of the TofuSoup CLI, such as <code>soup-go</code>. These binaries provide feature parity with the main Python CLI and serve as the canonical reference for conformance tests.</p>"},{"location":"guides/02-managing-language-clis/#listing-clis","title":"Listing CLIs","text":"<p>To see a list of available language-specific CLIs and their current build status, use the <code>list</code> command.</p> <p><pre><code>soup harness list\n</code></pre> This will display a table showing each CLI, its expected binary path, and whether it is currently built.</p>"},{"location":"guides/02-managing-language-clis/#building-clis","title":"Building CLIs","text":"<p>The <code>build</code> command compiles the source code for the language-specific CLIs and places the executables in a standardized location (<code>tofusoup/src/tofusoup/harness/go/bin/</code>).</p> <pre><code># Build all available CLIs\nsoup harness build --all\n\n# Build a specific CLI, for example soup-go\nsoup harness build soup-go\n\n# Force a rebuild even if the binary already exists\nsoup harness build soup-go --force-rebuild\n</code></pre> <p>Build behavior, such as Go build flags and environment variables, can be customized in <code>soup.toml</code>.</p>"},{"location":"guides/02-managing-language-clis/#verifying-clis","title":"Verifying CLIs","text":"<p>After building, you can run a basic verification check to ensure the CLI is functional.</p> <pre><code>soup harness verify-cli soup-go\n</code></pre>"},{"location":"guides/02-managing-language-clis/#cleaning-clis","title":"Cleaning CLIs","text":"<p>The <code>clean</code> command removes the compiled binary artifacts for one or more CLIs.</p> <pre><code># Clean a specific CLI\nsoup harness clean soup-go\n\n# Clean all built CLIs\nsoup harness clean --all\n</code></pre>"},{"location":"guides/03-using-cty-and-hcl-tools/","title":"Guide: Using CTY and HCL Tools","text":"<p>TofuSoup provides powerful command-line utilities for inspecting, converting, and validating CTY and HCL data formats.</p>"},{"location":"guides/03-using-cty-and-hcl-tools/#cty-utilities-soup-cty","title":"CTY Utilities (<code>soup cty</code>)","text":""},{"location":"guides/03-using-cty-and-hcl-tools/#view-data-structure","title":"View Data Structure","text":"<p>To view the CTY structure of a JSON, Msgpack, or HCL data file, use <code>soup cty view</code>. The output is a rich, colorized tree that shows the inferred CTY type and value.</p> <pre><code>soup cty view data.json\nsoup cty view config.tfvars --format hcl\n</code></pre>"},{"location":"guides/03-using-cty-and-hcl-tools/#convert-between-formats","title":"Convert Between Formats","text":"<p>To convert files between CTY-compatible JSON and Msgpack, use <code>soup cty convert</code>.</p> <pre><code># Convert JSON to MessagePack\nsoup cty convert input.json output.msgpack\n</code></pre>"},{"location":"guides/03-using-cty-and-hcl-tools/#validate-a-value-against-a-type","title":"Validate a Value Against a Type","text":"<p>You can validate a CTY value (as a JSON string) against a CTY type string using the <code>go-cty</code> harness. This is useful for checking type compatibility.</p> <pre><code># Validate a simple string\nsoup cty validate-value '\"hello\"' --type-string string\n\n# Validate a list of numbers\nsoup cty validate-value '' --type-string \"list(number)\"\n\n# Validate an object\nsoup cty validate-value '{\"name\":\"tofu\",\"age\":1}' --type-string \"object({name=string,age=number})\"\n</code></pre>"},{"location":"guides/03-using-cty-and-hcl-tools/#hcl-utilities-soup-hcl","title":"HCL Utilities (<code>soup hcl</code>)","text":""},{"location":"guides/03-using-cty-and-hcl-tools/#view-hcl-as-cty","title":"View HCL as CTY","text":"<p>To parse an HCL file (like a <code>.tf</code> or <code>.tfvars</code> file) and display its structure as a CTY representation, use <code>soup hcl view</code>.</p> <pre><code>soup hcl view main.tf\n</code></pre>"},{"location":"guides/03-using-cty-and-hcl-tools/#convert-hcl-to-json-or-msgpack","title":"Convert HCL to JSON or Msgpack","text":"<p>To convert an HCL file to a more portable format, use <code>soup hcl convert</code>. This implicitly uses CTY as the intermediate representation.</p> <pre><code># Convert HCL to JSON\nsoup hcl convert network.tf network.json\n</code></pre>"},{"location":"guides/04-authoring-garnish-bundles/","title":"Macro Rendering Error","text":"<p>File: <code>guides/04-authoring-garnish-bundles.md</code></p> <p>UndefinedError: 'example' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 35, in top-level template code\n  File \"/Users/tim/code/gh/provide-io/tofusoup/.venv/lib/python3.13/site-packages/jinja2/utils.py\", line 92, in from_obj\n    if hasattr(obj, \"jinja_pass_arg\"):\n       ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\njinja2.exceptions.UndefinedError: 'example' is undefined\n</code></pre>"},{"location":"guides/05-matrix-testing-with-stir/","title":"Guide: Matrix Testing with <code>stir</code>","text":"<p>The <code>soup stir</code> command is a powerful tool for running parallel integration tests for a provider. It now includes built-in matrix testing capabilities to validate your provider's behavior against multiple versions of Terraform or OpenTofu.</p>"},{"location":"guides/05-matrix-testing-with-stir/#built-in-matrix-testing-new","title":"Built-in Matrix Testing (New!)","text":"<p>As of the latest version, <code>soup stir</code> includes integrated matrix testing:</p> <pre><code># Run tests across all configured tool versions\nsoup stir tests/stir_cases --matrix\n\n# Save results to a file\nsoup stir tests/stir_cases --matrix --matrix-output results.json\n</code></pre> <p>This uses the matrix configuration from your <code>soup.toml</code> file (under <code>[workenv.matrix]</code>) or <code>wrkenv.toml</code> file.</p>"},{"location":"guides/05-matrix-testing-with-stir/#manual-matrix-testing","title":"Manual Matrix Testing","text":"<p>You can also manually control matrix testing using wrkenv:</p>"},{"location":"guides/05-matrix-testing-with-stir/#the-concept","title":"The Concept","text":"<p>The goal of matrix testing is to ensure your provider works correctly across the different IaC runtimes your users might have. The workflow is:</p> <ol> <li>Define Versions: Use the matrix configuration in <code>wrkenv.toml</code> to define the Terraform/Tofu versions you want to test against.</li> <li>Switch Runtime: Use <code>wrkenv</code> to switch the active <code>terraform</code> or <code>tofu</code> binary in the environment.</li> <li>Run Tests: Use <code>soup stir</code> to execute the full suite of integration tests using the currently active runtime.</li> <li>Repeat: Loop through all defined versions, switching the runtime and re-running the tests for each one.</li> </ol>"},{"location":"guides/05-matrix-testing-with-stir/#example-configuration","title":"Example Configuration","text":"<p>You can configure matrix testing in your <code>soup.toml</code> file:</p> <pre><code># In soup.toml\n\n[workenv.matrix]\nparallel_jobs = 4\ntimeout_minutes = 30\n\n[workenv.matrix.versions]\n# Additional versions to test against\ntofu = [\"1.6.2\", \"1.7.0-alpha1\"]\nterraform = [\"1.5.7\", \"1.6.0\"]\n</code></pre> <p>Note: You can alternatively use <code>wrkenv.toml</code> for this configuration, but soup.toml takes precedence.</p>"},{"location":"guides/05-matrix-testing-with-stir/#example-test-execution-script","title":"Example Test Execution Script","text":"<p>You can automate this workflow with a simple shell script.</p> <pre><code>#!/bin/bash\n# \ud83e\uddea Provider Matrix Test Runner\nset -eo pipefail\n\n# The directory containing all your 'stir' test cases\nSTIR_TEST_DIR=\"tests/stir_cases\"\n\n# Tools and versions to test, defined as \"tool_name:version1,version2,...\"\nTOOL_MATRIX=(\n  \"tofu:1.6.2,1.7.0\"\n  \"terraform:1.5.7,1.6.0\"\n)\n\necho \"\ud83c\udf72 Starting Provider Matrix Test...\"\n\nfor entry in \"${TOOL_MATRIX[@]}\"; do\n  TOOL_NAME=\"${entry%%:*}\"\n  VERSIONS=\"${entry#*:}\"\n\n  # Split versions by comma\n  IFS=',' read -ra VERSION_ARRAY &lt;&lt;&lt; \"$VERSIONS\"\n\n  for VERSION in \"${VERSION_ARRAY[@]}\"; do\n    echo \"\"\n    echo \"======================================================\"\n    echo \"\u27a1\ufe0f  Testing with ${TOOL_NAME} version ${VERSION}\"\n    echo \"======================================================\"\n\n    # Step 1: Install and switch to the target version using wrkenv\n    echo \"\ud83d\udd27 Setting up ${TOOL_NAME} ${VERSION}...\"\n    wrkenv \"${TOOL_NAME}\" \"${VERSION}\"\n\n    # Step 2: Run the stir test suite\n    echo \"\ud83d\ude80 Running 'stir' test suite...\"\n    soup stir \"${STIR_TEST_DIR}\"\n\n    echo \"\u2705 Completed tests for ${TOOL_NAME} ${VERSION}\"\n  done\ndone\n\necho \"\"\necho \"\ud83c\udf89 All matrix tests completed successfully!\"\n</code></pre> <p>This script iterates through your defined matrix, uses <code>soup workenv</code> to prepare the environment for each case, and then runs <code>soup stir</code> to validate the provider's behavior, ensuring broad compatibility.</p>"},{"location":"testing/conformance-test-status/","title":"Conformance Test Status","text":""},{"location":"testing/conformance-test-status/#overview","title":"Overview","text":"<p>This document tracks the status of conformance tests after migrating from separate harnesses (go-cty, go-hcl, go-wire) to the unified soup-go implementation.</p>"},{"location":"testing/conformance-test-status/#test-results-summary","title":"Test Results Summary","text":"<p>As of the latest run: - 31 passed \u2705 - 11 failed \u274c - 24 skipped \u23ed\ufe0f - 85 deselected</p>"},{"location":"testing/conformance-test-status/#known-issues","title":"Known Issues","text":""},{"location":"testing/conformance-test-status/#1-hcl-error-handling","title":"1. HCL Error Handling","text":"<p>Issue: soup-go returns exit code 0 even for parse errors, with errors in JSON output - Test expects: Exit code 1 for syntax errors - soup-go returns: Exit code 0 with <code>{\"success\": false, \"errors\": [...]}</code></p> <p>Affected tests: - <code>test_hcl_cli_parse[parse_syntax_error-soup-go]</code></p>"},{"location":"testing/conformance-test-status/#2-wire-protocol-format-differences","title":"2. Wire Protocol Format Differences","text":"<p>Issue: The old go-wire harness used base64 encoding, soup-go uses raw binary/msgpack - Tests expect: Base64-encoded wire format - soup-go provides: Raw msgpack bytes</p> <p>Affected tests: - <code>test_wire_cli_encode_simple_string</code> - <code>test_wire_cli_decode_simple_string</code></p>"},{"location":"testing/conformance-test-status/#3-command-structure-changes","title":"3. Command Structure Changes","text":"<p>All commands now require the subcommand prefix: - Old: <code>go-cty validate ...</code> - New: <code>soup-go cty validate-value ...</code></p> <ul> <li>Old: <code>go-hcl parse ...</code></li> <li> <p>New: <code>soup-go hcl parse ...</code></p> </li> <li> <p>Old: <code>go-wire encode ...</code></p> </li> <li>New: <code>soup-go wire encode ...</code></li> </ul>"},{"location":"testing/conformance-test-status/#migration-notes","title":"Migration Notes","text":""},{"location":"testing/conformance-test-status/#no-backward-compatibility","title":"No Backward Compatibility","text":"<p>Per user request, backward compatibility aliases have been removed. All tests must use soup-go directly with the appropriate subcommands.</p>"},{"location":"testing/conformance-test-status/#environment-variables","title":"Environment Variables","text":"<p>CTY test suite environment variables are properly configured via <code>conformance/cty/conftest.py</code> which loads settings from <code>soup.toml</code>: - <code>TOFUSOUP_TEST_DEFAULT_ENV</code> - <code>TOFUSOUP_CTY_SUITE_ENV</code></p>"},{"location":"testing/conformance-test-status/#recommendations","title":"Recommendations","text":"<ol> <li> <p>Exit Code Behavior: Consider whether soup-go should return non-zero exit codes for errors to match typical CLI behavior, or if tests should be updated to check JSON success field.</p> </li> <li> <p>Wire Format: Decide on standard encoding (raw bytes vs base64) for wire protocol operations.</p> </li> <li> <p>Test Updates: Continue updating remaining tests to match soup-go's actual behavior as the reference implementation.</p> </li> </ol>"},{"location":"testing/cross-language-compatibility/","title":"Cross-Language Compatibility Testing","text":"<p>This document describes how to run and verify cross-language compatibility between the Python <code>soup</code> CLI and the Go <code>soup-go</code> harness, ensuring that data structures (CTY values, HCL, wire protocol) can be correctly exchanged between implementations.</p>"},{"location":"testing/cross-language-compatibility/#prerequisites","title":"Prerequisites","text":""},{"location":"testing/cross-language-compatibility/#1-build-the-go-harness","title":"1. Build the Go Harness","text":"<p>The <code>soup-go</code> binary must be built before running tests:</p> <pre><code>cd src/tofusoup/harness/go/soup-go\ngo build -o $TOFUSOUP_ROOT/bin/soup-go .\n</code></pre> <p>The binary will be placed in <code>/Users/tim/code/gh/provide-io/tofusoup/bin/soup-go</code>.</p>"},{"location":"testing/cross-language-compatibility/#2-python-environment","title":"2. Python Environment","text":"<p>Ensure the Python environment is activated with all dependencies:</p> <pre><code>uv sync  # Sets up the workenv (not .venv)\n</code></pre>"},{"location":"testing/cross-language-compatibility/#running-cross-language-tests","title":"Running Cross-Language Tests","text":""},{"location":"testing/cross-language-compatibility/#cty-compatibility-tests","title":"CTY Compatibility Tests","text":"<p>The primary cross-language compatibility tests are in <code>conformance/cty/souptest_cty_interop.py</code>.</p>"},{"location":"testing/cross-language-compatibility/#run-all-cty-compatibility-tests","title":"Run all CTY compatibility tests:","text":"<pre><code>pytest conformance/cty/souptest_cty_interop.py -v\n</code></pre>"},{"location":"testing/cross-language-compatibility/#run-specific-test-cases","title":"Run specific test cases:","text":"<pre><code># Test a specific case (e.g., string handling)\npytest conformance/cty/souptest_cty_interop.py -k \"string_simple\" -v\n\n# Test unknown value handling (will be skipped for JSON input)\npytest conformance/cty/souptest_cty_interop.py -k \"unknown\" -v\n</code></pre>"},{"location":"testing/cross-language-compatibility/#test-architecture","title":"Test Architecture","text":""},{"location":"testing/cross-language-compatibility/#test-flow","title":"Test Flow","text":"<p>The cross-language tests verify bidirectional compatibility:</p> <ol> <li>Python \u2192 Go \u2192 Python: Python creates fixtures, Go processes them, Python validates</li> <li>Go \u2192 Python \u2192 Go: Go creates fixtures, Python processes them, Go validates</li> </ol>"},{"location":"testing/cross-language-compatibility/#test-cases","title":"Test Cases","text":"<p>The test suite covers: - Basic types: strings, numbers, booleans - Null values: Proper null handling across languages - Unknown values: MessagePack-only (JSON not supported by go-cty) - Collections: Lists, sets, maps - Complex types: Objects, tuples, nested structures - Dynamic types: Dynamic pseudo-type wrapping</p>"},{"location":"testing/cross-language-compatibility/#important-limitations","title":"Important Limitations","text":""},{"location":"testing/cross-language-compatibility/#unknown-values-and-json","title":"Unknown Values and JSON","text":"<p>go-cty (and Terraform) CANNOT handle unknown values in JSON format. This is a fundamental limitation:</p> <ul> <li>\u274c JSON \u2192 Unknown \u2192 Go: Will fail with \"value is not known\"</li> <li>\u2705 MessagePack \u2192 Unknown \u2192 Go: Works correctly</li> <li>\u2705 Go \u2192 Unknown \u2192 MessagePack: Works correctly</li> <li>\u274c Go \u2192 Unknown \u2192 JSON: Will fail with \"value is not known\"</li> </ul> <p>Tests involving unknown values through JSON are automatically skipped.</p>"},{"location":"testing/cross-language-compatibility/#manual-verification","title":"Manual Verification","text":""},{"location":"testing/cross-language-compatibility/#cty-operations","title":"CTY Operations","text":""},{"location":"testing/cross-language-compatibility/#test-basic-conversion","title":"Test basic conversion:","text":"<pre><code># JSON to MessagePack\necho '\"hello\"' | soup-go cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | xxd\n\n# MessagePack roundtrip\necho '\"test\"' | soup-go cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | \\\nsoup-go cty convert - - \\\n  --input-format msgpack \\\n  --output-format json \\\n  --type '\"string\"'\n</code></pre>"},{"location":"testing/cross-language-compatibility/#test-validation","title":"Test validation:","text":"<pre><code># Validate a value\nsoup-go cty validate-value '\"hello\"' --type '\"string\"'\n\n# Should output: \"Validation Succeeded\"\n</code></pre>"},{"location":"testing/cross-language-compatibility/#hcl-parsing","title":"HCL Parsing","text":""},{"location":"testing/cross-language-compatibility/#create-a-test-hcl-file","title":"Create a test HCL file:","text":"<pre><code>cat &gt; /tmp/test.hcl &lt;&lt; 'EOF'\nresource \"example\" \"test\" {\n  name = \"hello\"\n  count = 42\n}\nEOF\n</code></pre>"},{"location":"testing/cross-language-compatibility/#parse-with-soup-go","title":"Parse with soup-go:","text":"<pre><code>soup-go hcl parse /tmp/test.hcl | python3 -m json.tool\n</code></pre> <p>Expected output: <pre><code>{\n    \"body\": {\n        \"blocks\": [\n            {\n                \"body\": {\n                    \"count\": 42,\n                    \"name\": \"hello\"\n                },\n                \"labels\": [\"example\", \"test\"],\n                \"type\": \"resource\"\n            }\n        ]\n    },\n    \"success\": true\n}\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#validate-hcl-syntax","title":"Validate HCL syntax:","text":"<pre><code>soup-go hcl validate /tmp/test.hcl\n</code></pre>"},{"location":"testing/cross-language-compatibility/#wire-protocol","title":"Wire Protocol","text":""},{"location":"testing/cross-language-compatibility/#test-encodingdecoding","title":"Test encoding/decoding:","text":"<pre><code># JSON to MessagePack wire format\necho '{\"key\": \"value\"}' | soup-go wire encode - - \\\n  --input-format json \\\n  --output-format msgpack | xxd\n\n# With CTY type awareness\necho '\"hello\"' | soup-go wire encode - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' | xxd\n</code></pre>"},{"location":"testing/cross-language-compatibility/#debugging-failed-tests","title":"Debugging Failed Tests","text":""},{"location":"testing/cross-language-compatibility/#1-check-binary-version","title":"1. Check Binary Version","text":"<p>Ensure soup-go is up to date: <pre><code>soup-go --version\n# Should show: 0.1.0 or later\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#2-verbose-logging","title":"2. Verbose Logging","text":"<p>Run soup-go with verbose logging: <pre><code>soup-go --log-level debug cty convert - - \\\n  --input-format json \\\n  --output-format msgpack \\\n  --type '\"string\"' &lt;&lt;&lt; '\"test\"'\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#3-check-messagepack-formats","title":"3. Check MessagePack Formats","text":"<p>Python and Go use slightly different MessagePack extension formats for unknown values: - Python: <code>c70000</code> (fixext2) - Go: <code>d40000</code> (fixext1)</p> <p>Both formats are interoperable and correctly handled by both implementations.</p>"},{"location":"testing/cross-language-compatibility/#4-common-issues","title":"4. Common Issues","text":""},{"location":"testing/cross-language-compatibility/#value-is-not-known-error","title":"\"value is not known\" Error","text":"<p>This occurs when trying to convert unknown values through JSON. This is expected behavior matching Terraform. Use MessagePack for unknown values.</p>"},{"location":"testing/cross-language-compatibility/#unknown-flag-error","title":"\"unknown flag\" Error","text":"<p>The soup-go binary is outdated. Rebuild it: <pre><code>cd src/tofusoup/harness/go/soup-go\ngo build -o $TOFUSOUP_ROOT/bin/soup-go .\n</code></pre></p>"},{"location":"testing/cross-language-compatibility/#continuous-integration","title":"Continuous Integration","text":"<p>For CI/CD pipelines, ensure:</p> <ol> <li>Go is installed (version 1.21+)</li> <li>Build soup-go before running tests:    <pre><code>make -C src/tofusoup/harness/go/soup-go build\n</code></pre></li> <li>Run the test suite:    <pre><code>pytest conformance/cty/souptest_cty_interop.py --tb=short\n</code></pre></li> </ol>"},{"location":"testing/cross-language-compatibility/#reference-implementation","title":"Reference Implementation","text":"<p>The Go implementation (<code>soup-go</code>) serves as the reference implementation that exactly matches Terraform's behavior. No workarounds or Python-specific accommodations should be made in the Go code. Instead, Python tests should adapt to Go/Terraform's limitations (e.g., skipping unknown value tests for JSON input).</p>"}]}